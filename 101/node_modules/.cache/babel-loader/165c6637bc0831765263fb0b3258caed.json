{"ast":null,"code":"import { invariant } from \"../globals/index.js\";\nimport { visit, BREAK } from \"graphql\";\nexport function shouldInclude(_a, variables) {\n  var directives = _a.directives;\n\n  if (!directives || !directives.length) {\n    return true;\n  }\n\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n        ifArgument = _a.ifArgument;\n    var evaledValue = false;\n\n    if (ifArgument.value.kind === \"Variable\") {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      invariant(evaledValue !== void 0, 66, directive.name.value);\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n\n    return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n  });\n}\nexport function getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nexport var hasAnyDirectives = function (names, root) {\n  return hasDirectives(names, root, false);\n};\nexport var hasAllDirectives = function (names, root) {\n  return hasDirectives(names, root, true);\n};\nexport function hasDirectives(names, root, all) {\n  var nameSet = new Set(names);\n  var uniqueCount = nameSet.size;\n  visit(root, {\n    Directive: function (node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    }\n  }); // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\nexport function hasClientExports(document) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\n\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === \"skip\" || value === \"include\";\n}\n\nexport function getInclusionDirectives(directives) {\n  var result = [];\n\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      invariant(directiveArguments && directiveArguments.length === 1, 67, directiveName);\n      var ifArgument = directiveArguments[0];\n      invariant(ifArgument.name && ifArgument.name.value === \"if\", 68, directiveName);\n      var ifValue = ifArgument.value; // means it has to be a variable value if this is a valid @skip or @include directive\n\n      invariant(ifValue && (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"), 69, directiveName);\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/directives.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../globals/index.js\";\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport type {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n} from \"graphql\";\nimport { visit, BREAK } from \"graphql\";\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(\n    ({ directive, ifArgument }) => {\n      let evaledValue: boolean = false;\n      if (ifArgument.value.kind === \"Variable\") {\n        evaledValue =\n          variables && variables[(ifArgument.value as VariableNode).name.value];\n        invariant(\n          evaledValue !== void 0,\n          `Invalid variable referenced in @%s directive.`,\n          directive.name.value\n        );\n      } else {\n        evaledValue = (ifArgument.value as BooleanValueNode).value;\n      }\n      return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    }\n  );\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport const hasAnyDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, false);\n\nexport const hasAllDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, true);\n\nexport function hasDirectives(names: string[], root: ASTNode, all?: boolean) {\n  const nameSet = new Set(names);\n  const uniqueCount = nameSet.size;\n\n  visit(root, {\n    Directive(node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    },\n  });\n\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === \"skip\" || value === \"include\";\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach((directive) => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @%s directive.`,\n        directiveName\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === \"if\",\n        `Invalid argument for the @%s directive.`,\n        directiveName\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"),\n        `Argument for the @%s directive must be a variable or a boolean value.`,\n        directiveName\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}