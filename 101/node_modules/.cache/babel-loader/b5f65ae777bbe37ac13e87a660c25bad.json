{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { StrongCache } from \"@wry/caches\";\nimport { Entry } from \"./entry.js\";\nimport { parentEntrySlot } from \"./context.js\"; // These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\n\nexport { bindContext, noContext, nonReactive, setTimeout, asyncFromGen, Slot } from \"./context.js\"; // A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\n\nexport { dep } from \"./dep.js\"; // The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\n\nlet defaultKeyTrie;\nexport function defaultMakeCacheKey(...args) {\n  const trie = defaultKeyTrie || (defaultKeyTrie = new Trie(typeof WeakMap === \"function\"));\n  return trie.lookupArray(args);\n} // If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\n\nexport { Trie as KeyTrie };\n;\nconst caches = new Set();\nexport function wrap(originalFunction, {\n  max = Math.pow(2, 16),\n  keyArgs,\n  makeCacheKey = defaultMakeCacheKey,\n  normalizeResult,\n  subscribe,\n  cache: cacheOption = StrongCache\n} = Object.create(null)) {\n  const cache = typeof cacheOption === \"function\" ? new cacheOption(max, entry => entry.dispose()) : cacheOption;\n\n  const optimistic = function () {\n    const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n\n    let entry = cache.get(key);\n\n    if (!entry) {\n      cache.set(key, entry = new Entry(originalFunction));\n      entry.normalizeResult = normalizeResult;\n      entry.subscribe = subscribe; // Give the Entry the ability to trigger cache.delete(key), even though\n      // the Entry itself does not know about key or cache.\n\n      entry.forget = () => cache.delete(key);\n    }\n\n    const value = entry.recompute(Array.prototype.slice.call(arguments)); // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n\n    cache.set(key, entry);\n    caches.add(cache); // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  };\n\n  Object.defineProperty(optimistic, \"size\", {\n    get: () => cache.size,\n    configurable: false,\n    enumerable: false\n  });\n  Object.freeze(optimistic.options = {\n    max,\n    keyArgs,\n    makeCacheKey,\n    normalizeResult,\n    subscribe,\n    cache\n  });\n\n  function dirtyKey(key) {\n    const entry = key && cache.get(key);\n\n    if (entry) {\n      entry.setDirty();\n    }\n  }\n\n  optimistic.dirtyKey = dirtyKey;\n\n  optimistic.dirty = function dirty() {\n    dirtyKey(makeCacheKey.apply(null, arguments));\n  };\n\n  function peekKey(key) {\n    const entry = key && cache.get(key);\n\n    if (entry) {\n      return entry.peek();\n    }\n  }\n\n  optimistic.peekKey = peekKey;\n\n  optimistic.peek = function peek() {\n    return peekKey(makeCacheKey.apply(null, arguments));\n  };\n\n  function forgetKey(key) {\n    return key ? cache.delete(key) : false;\n  }\n\n  optimistic.forgetKey = forgetKey;\n\n  optimistic.forget = function forget() {\n    return forgetKey(makeCacheKey.apply(null, arguments));\n  };\n\n  optimistic.makeCacheKey = makeCacheKey;\n  optimistic.getKey = keyArgs ? function getKey() {\n    return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n  } : makeCacheKey;\n  return Object.freeze(optimistic);\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Trie } from \"@wry/trie\";\nimport { StrongCache } from \"@wry/caches\";\nimport { Entry } from \"./entry.js\";\nimport { parentEntrySlot } from \"./context.js\";\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport { bindContext, noContext, nonReactive, setTimeout, asyncFromGen, Slot, } from \"./context.js\";\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep } from \"./dep.js\";\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nlet defaultKeyTrie;\nexport function defaultMakeCacheKey(...args) {\n    const trie = defaultKeyTrie || (defaultKeyTrie = new Trie(typeof WeakMap === \"function\"));\n    return trie.lookupArray(args);\n}\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { Trie as KeyTrie };\n;\nconst caches = new Set();\nexport function wrap(originalFunction, { max = Math.pow(2, 16), keyArgs, makeCacheKey = defaultMakeCacheKey, normalizeResult, subscribe, cache: cacheOption = StrongCache, } = Object.create(null)) {\n    const cache = typeof cacheOption === \"function\"\n        ? new cacheOption(max, entry => entry.dispose())\n        : cacheOption;\n    const optimistic = function () {\n        const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);\n        if (key === void 0) {\n            return originalFunction.apply(null, arguments);\n        }\n        let entry = cache.get(key);\n        if (!entry) {\n            cache.set(key, entry = new Entry(originalFunction));\n            entry.normalizeResult = normalizeResult;\n            entry.subscribe = subscribe;\n            // Give the Entry the ability to trigger cache.delete(key), even though\n            // the Entry itself does not know about key or cache.\n            entry.forget = () => cache.delete(key);\n        }\n        const value = entry.recompute(Array.prototype.slice.call(arguments));\n        // Move this entry to the front of the least-recently used queue,\n        // since we just finished computing its value.\n        cache.set(key, entry);\n        caches.add(cache);\n        // Clean up any excess entries in the cache, but only if there is no\n        // active parent entry, meaning we're not in the middle of a larger\n        // computation that might be flummoxed by the cleaning.\n        if (!parentEntrySlot.hasValue()) {\n            caches.forEach(cache => cache.clean());\n            caches.clear();\n        }\n        return value;\n    };\n    Object.defineProperty(optimistic, \"size\", {\n        get: () => cache.size,\n        configurable: false,\n        enumerable: false,\n    });\n    Object.freeze(optimistic.options = {\n        max,\n        keyArgs,\n        makeCacheKey,\n        normalizeResult,\n        subscribe,\n        cache,\n    });\n    function dirtyKey(key) {\n        const entry = key && cache.get(key);\n        if (entry) {\n            entry.setDirty();\n        }\n    }\n    optimistic.dirtyKey = dirtyKey;\n    optimistic.dirty = function dirty() {\n        dirtyKey(makeCacheKey.apply(null, arguments));\n    };\n    function peekKey(key) {\n        const entry = key && cache.get(key);\n        if (entry) {\n            return entry.peek();\n        }\n    }\n    optimistic.peekKey = peekKey;\n    optimistic.peek = function peek() {\n        return peekKey(makeCacheKey.apply(null, arguments));\n    };\n    function forgetKey(key) {\n        return key ? cache.delete(key) : false;\n    }\n    optimistic.forgetKey = forgetKey;\n    optimistic.forget = function forget() {\n        return forgetKey(makeCacheKey.apply(null, arguments));\n    };\n    optimistic.makeCacheKey = makeCacheKey;\n    optimistic.getKey = keyArgs ? function getKey() {\n        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n    } : makeCacheKey;\n    return Object.freeze(optimistic);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}