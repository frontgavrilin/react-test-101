{"ast":null,"code":"import { isNonNullObject } from \"./objects.js\";\n\nfunction deepFreeze(value) {\n  var workSet = new Set([value]);\n  workSet.forEach(function (obj) {\n    if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n      Object.getOwnPropertyNames(obj).forEach(function (name) {\n        if (isNonNullObject(obj[name])) workSet.add(obj[name]);\n      });\n    }\n  });\n  return value;\n}\n\nfunction shallowFreeze(obj) {\n  if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {\n    try {\n      Object.freeze(obj);\n    } catch (e) {\n      // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n      // they all throw a TypeError when you try, so we re-throw any exceptions\n      // that are not TypeErrors, since that would be unexpected.\n      if (e instanceof TypeError) return null;\n      throw e;\n    }\n  }\n\n  return obj;\n}\n\nexport function maybeDeepFreeze(obj) {\n  if (globalThis.__DEV__ !== false) {\n    deepFreeze(obj);\n  }\n\n  return obj;\n}","map":{"version":3,"sources":["../../../src/utilities/common/maybeDeepFreeze.ts"],"names":[],"mappings":"AAAA,SAAS,eAAT,QAAgC,cAAhC;;AAEA,SAAS,UAAT,CAAoB,KAApB,EAA8B;AAC5B,MAAM,OAAO,GAAG,IAAI,GAAJ,CAAQ,CAAC,KAAD,CAAR,CAAhB;AACA,EAAA,OAAO,CAAC,OAAR,CAAgB,UAAC,GAAD,EAAI;AAClB,QAAI,eAAe,CAAC,GAAD,CAAf,IAAwB,aAAa,CAAC,GAAD,CAAb,KAAuB,GAAnD,EAAwD;AACtD,MAAA,MAAM,CAAC,mBAAP,CAA2B,GAA3B,EAAgC,OAAhC,CAAwC,UAAC,IAAD,EAAK;AAC3C,YAAI,eAAe,CAAC,GAAG,CAAC,IAAD,CAAJ,CAAnB,EAAgC,OAAO,CAAC,GAAR,CAAY,GAAG,CAAC,IAAD,CAAf;AACjC,OAFD;AAGD;AACF,GAND;AAOA,SAAO,KAAP;AACD;;AAED,SAAS,aAAT,CAAyC,GAAzC,EAA+C;AAC7C,MAAI,UAAO,CAAI,OAAX,KAAmB,KAAnB,IAAgC,CAAA,MAAG,CAAA,QAAH,CAAG,GAAH,CAApC,EAAuC;AACrC,QAAI;AACF,MAAA,MAAM,CAAC,MAAP,CAAc,GAAd;AACD,KAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA;AACA;AACA,UAAI,CAAC,YAAY,SAAjB,EAA4B,OAAO,IAAP;AAC5B,YAAM,CAAN;AACD;AACF;;AACD,SAAO,GAAP;AACD;;AAED,OAAM,SAAU,eAAV,CAA6B,GAA7B,EAAmC;AACvC,MAAI,UAAU,CAAA,OAAV,KAAU,KAAd,EAAc;AACZ,IAAA,UAAU,CAAC,GAAD,CAAV;AACD;;AACD,SAAO,GAAP;AACD","sourcesContent":["import { isNonNullObject } from \"./objects.js\";\n\nfunction deepFreeze(value: any) {\n  const workSet = new Set([value]);\n  workSet.forEach((obj) => {\n    if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n      Object.getOwnPropertyNames(obj).forEach((name) => {\n        if (isNonNullObject(obj[name])) workSet.add(obj[name]);\n      });\n    }\n  });\n  return value;\n}\n\nfunction shallowFreeze<T extends object>(obj: T): T | null {\n  if (__DEV__ && !Object.isFrozen(obj)) {\n    try {\n      Object.freeze(obj);\n    } catch (e) {\n      // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n      // they all throw a TypeError when you try, so we re-throw any exceptions\n      // that are not TypeErrors, since that would be unexpected.\n      if (e instanceof TypeError) return null;\n      throw e;\n    }\n  }\n  return obj;\n}\n\nexport function maybeDeepFreeze<T>(obj: T): T {\n  if (__DEV__) {\n    deepFreeze(obj);\n  }\n  return obj;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}