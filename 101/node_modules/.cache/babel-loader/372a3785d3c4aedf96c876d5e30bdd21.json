{"ast":null,"code":"import { Observable } from \"./Observable.js\"; // Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\n\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then: function (callback) {\n        return new Promise(function (resolve) {\n          return resolve(callback());\n        });\n      }\n    };\n\n    function makeCallback(examiner, key) {\n      return function (arg) {\n        if (examiner) {\n          var both = function () {\n            // If the observer is closed, we don't want to continue calling the\n            // mapping function - it's result will be swallowed anyways.\n            return observer.closed ?\n            /* will be swallowed */\n            0 : examiner(arg);\n          };\n\n          promiseQueue = promiseQueue.then(both, both).then(function (result) {\n            return observer.next(result);\n          }, function (error) {\n            return observer.error(error);\n          });\n        } else {\n          observer[key](arg);\n        }\n      };\n    }\n\n    var handler = {\n      next: makeCallback(mapFn, \"next\"),\n      error: makeCallback(catchFn, \"error\"),\n      complete: function () {\n        // no need to reassign `promiseQueue`, after `observer.complete`,\n        // the observer will be closed and short-circuit everything anyways\n\n        /*promiseQueue = */\n        promiseQueue.then(function () {\n          return observer.complete();\n        });\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"sources":["../../../src/utilities/observables/asyncMap.ts"],"names":[],"mappings":"AACA,SAAS,UAAT,QAA2B,iBAA3B,C,CAEA;AACA;;AACA,OAAM,SAAU,QAAV,CACJ,UADI,EAEJ,KAFI,EAGJ,OAHI,EAGwC;AAE5C,SAAO,IAAI,UAAJ,CAAkB,UAAC,QAAD,EAAS;AAChC,QAAI,YAAY,GAAG;AACjB;AACA;AACA;AACA,MAAA,IAAI,EAAA,UAAC,QAAD,EAAoB;AACtB,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAQ;AAAK,iBAAA,OAAO,CAAC,QAAR,EAAO,CAAP;AAAmB,SAA5C,CAAP;AACD;AANgB,KAAnB;;AASA,aAAS,YAAT,CACE,QADF,EAEE,GAFF,EAEuB;AAErB,aAAO,UAAC,GAAD,EAAI;AACT,YAAI,QAAJ,EAAc;AACZ,cAAM,IAAI,GAAG,YAAA;AACX;AACA;AACA,mBAAA,QAAQ,CAAC,MAAT;AACE;AAAyB,aAD3B,GAEE,QAAQ,CAAC,GAAD,CAFV;AAEe,WALjB;;AAOA,UAAA,YAAY,GAAG,YAAY,CAAC,IAAb,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B,IAA9B,CACb,UAAC,MAAD,EAAO;AAAK,mBAAA,QAAQ,CAAC,IAAT,CAAA,MAAA,CAAA;AAAqB,WADpB,EAEb,UAAC,KAAD,EAAM;AAAK,mBAAA,QAAQ,CAAC,KAAT,CAAA,KAAA,CAAA;AAAqB,WAFnB,CAAf;AAID,SAZD,MAYO;AACL,UAAA,QAAQ,CAAC,GAAD,CAAR,CAAc,GAAd;AACD;AACF,OAhBD;AAiBD;;AAED,QAAM,OAAO,GAAgB;AAC3B,MAAA,IAAI,EAAE,YAAY,CAAC,KAAD,EAAQ,MAAR,CADS;AAE3B,MAAA,KAAK,EAAE,YAAY,CAAC,OAAD,EAAU,OAAV,CAFQ;AAG3B,MAAA,QAAQ,EAAA,YAAA;AACN;AACA;;AACA;AAAoB,QAAA,YAAY,CAAC,IAAb,CAAkB,YAAA;AAAM,iBAAA,QAAQ,CAAR,QAAA,EAAA;AAAmB,SAA3C;AACrB;AAP0B,KAA7B;AAUA,QAAM,GAAG,GAAG,UAAU,CAAC,SAAX,CAAqB,OAArB,CAAZ;AACA,WAAO,YAAA;AAAM,aAAA,GAAG,CAAH,WAAA,EAAA;AAAiB,KAA9B;AACD,GA7CM,CAAP;AA8CD","sourcesContent":["import type { Observer } from \"./Observable.js\";\nimport { Observable } from \"./Observable.js\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>\n): Observable<R> {\n  return new Observable<R>((observer) => {\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise((resolve) => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      key: \"next\" | \"error\"\n    ): (arg: any) => void {\n      return (arg) => {\n        if (examiner) {\n          const both = () =>\n            // If the observer is closed, we don't want to continue calling the\n            // mapping function - it's result will be swallowed anyways.\n            observer.closed ?\n              /* will be swallowed */ (0 as any)\n            : examiner(arg);\n\n          promiseQueue = promiseQueue.then(both, both).then(\n            (result) => observer.next(result),\n            (error) => observer.error(error)\n          );\n        } else {\n          observer[key](arg);\n        }\n      };\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, \"next\"),\n      error: makeCallback(catchFn, \"error\"),\n      complete() {\n        // no need to reassign `promiseQueue`, after `observer.complete`,\n        // the observer will be closed and short-circuit everything anyways\n        /*promiseQueue = */ promiseQueue.then(() => observer.complete());\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}