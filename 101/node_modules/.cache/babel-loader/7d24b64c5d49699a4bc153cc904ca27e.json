{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\n\nvar LocalState =\n/** @class */\nfunction () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n        client = _a.client,\n        resolvers = _a.resolvers,\n        fragmentMatcher = _a.fragmentMatcher;\n    this.selectionsToResolveCache = new WeakMap();\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n\n    this.resolvers = this.resolvers || {};\n\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  }; // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n\n\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n        remoteResult = _a.remoteResult,\n        context = _a.context,\n        variables = _a.variables,\n        _b = _a.onlyRunForcedResolvers,\n        onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2\n          /*return*/\n          , this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n\n        return [2\n        /*return*/\n        , remoteResult];\n      });\n    });\n  };\n\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  }; // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n\n\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives([\"client\"], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n\n    return null;\n  }; // Server queries are stripped of all @client based selection sets.\n\n\n  LocalState.prototype.serverQuery = function (document) {\n    return removeClientSetsFromDocument(document);\n  };\n\n  LocalState.prototype.prepareContext = function (context) {\n    var cache = this.cache;\n    return __assign(__assign({}, context), {\n      cache: cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey: function (obj) {\n        return cache.identify(obj);\n      }\n    });\n  }; // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n\n\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (context === void 0) {\n      context = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2\n          /*return*/\n          , this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n\n        return [2\n        /*return*/\n        , __assign({}, variables)];\n      });\n    });\n  };\n\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === \"client\" && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === \"always\" && arg.value.kind === \"BooleanValue\" && arg.value.value === true;\n            });\n\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  }; // Query the cache and return matching data.\n\n\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : \"Query\";\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          selectionsToResolve: selectionsToResolve,\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        isClientFieldDescendant = false;\n        return [2\n        /*return*/\n        , this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!isClientFieldDescendant && !execContext.selectionsToResolve.has(selection)) {\n                // Skip selections without @client directives\n                // (still processing if one of the ancestors or one of the child fields has @client directive)\n                return [2\n                /*return*/\n                ];\n              }\n\n              if (!shouldInclude(selection, variables)) {\n                // Skip this entirely.\n                return [2\n                /*return*/\n                ];\n              }\n\n              if (isField(selection)) {\n                return [2\n                /*return*/\n                , this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n\n                  if (typeof fieldResult !== \"undefined\") {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                // This is a named fragment.\n                fragment = fragmentMap[selection.name.value];\n                invariant(fragment, 18, selection.name.value);\n              }\n\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2\n                  /*return*/\n                  , this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n\n              return [2\n              /*return*/\n              ];\n            });\n          });\n        };\n\n        return [2\n        /*return*/\n        , Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        if (!rootValue) {\n          return [2\n          /*return*/\n          , null];\n        }\n\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult); // Usually all local resolvers are run when passing through here, but\n        // if we've specifically identified that we only want to run forced\n        // resolvers (that is, resolvers for fields marked with\n        // `@client(always: true)`), then we'll skip running non-forced resolvers.\n\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n\n            if (resolve) {\n              resultPromise = Promise.resolve( // In case the resolve function accesses reactive variables,\n              // set cacheSlot to the current cache instance.\n              cacheSlot.withValue(this.cache, resolve, [rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }]));\n            }\n          }\n        }\n\n        return [2\n        /*return*/\n        , resultPromise.then(function (result) {\n          var _a, _b;\n\n          if (result === void 0) {\n            result = defaultResult;\n          } // If an @export directive is associated with the current field, store\n          // the `as` export variable name and current result for later use.\n\n\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === \"export\" && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          } // Handle all scalar types here.\n\n\n          if (!field.selectionSet) {\n            return result;\n          } // From here down, the field has a selection set, which means it's trying\n          // to query a GraphQLObjectType.\n\n\n          if (result == null) {\n            // Basically any field in a GraphQL response can be null, or missing\n            return result;\n          }\n\n          var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) {\n            return d.name.value === \"client\";\n          })) !== null && _b !== void 0 ? _b : false;\n\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n          } // Returned value is an object, and the query has a sub-selection. Recurse.\n\n\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n    var _this = this;\n\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      } // This is a nested array, recurse.\n\n\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n      } // This is an object, run the selection set on it.\n\n\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n      }\n    }));\n  }; // Collect selection nodes on paths from document root down to all @client directives.\n  // This function takes into account transitive fragment spreads.\n  // Complexity equals to a single `visit` over the full document.\n\n\n  LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n    var isSingleASTNode = function (node) {\n      return !Array.isArray(node);\n    };\n\n    var selectionsToResolveCache = this.selectionsToResolveCache;\n\n    function collectByDefinition(definitionNode) {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        var matches_1 = new Set();\n        selectionsToResolveCache.set(definitionNode, matches_1);\n        visit(definitionNode, {\n          Directive: function (node, _, __, ___, ancestors) {\n            if (node.name.value === \"client\") {\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n            }\n          },\n          FragmentSpread: function (spread, _, __, ___, ancestors) {\n            var fragment = fragmentMap[spread.name.value];\n            invariant(fragment, 19, spread.name.value);\n            var fragmentSelections = collectByDefinition(fragment);\n\n            if (fragmentSelections.size > 0) {\n              // Fragment for this spread contains @client directive (either directly or transitively)\n              // Collect selection nodes on paths from the root down to fields with the @client directive\n              ancestors.forEach(function (node) {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches_1.add(node);\n                }\n              });\n              matches_1.add(spread);\n              fragmentSelections.forEach(function (selection) {\n                matches_1.add(selection);\n              });\n            }\n          }\n        });\n      }\n\n      return selectionsToResolveCache.get(definitionNode);\n    }\n\n    return collectByDefinition(mainDefinition);\n  };\n\n  return LocalState;\n}();\n\nexport { LocalState };","map":{"version":3,"sources":["../../src/core/LocalState.ts"],"names":[],"mappings":";AAAA,SAAS,SAAT,QAA0B,+BAA1B;AAeA,SAAS,KAAT,EAAgB,KAAhB,EAAuB,eAAvB,QAA8C,SAA9C;AAIA,SACE,wBADF,EAEE,0BAFF,EAGE,iBAHF,EAIE,sBAJF,EAKE,iBALF,EAME,aANF,EAOE,OAPF,EAQE,gBARF,EASE,SATF,EAUE,cAVF,EAWE,4BAXF,EAYE,sBAZF,EAaE,aAbF,QAcO,uBAdP;AAkBA,SAAS,SAAT,QAA0B,mBAA1B;;AAsCA,IAAA,UAAA;AAAA;AAAA,YAAA;AAUE,WAAA,UAAA,CAAY,EAAZ,EAKiC;QAJ/B,KAAK,GAAA,EAAA,CAAA,K;QACL,MAAM,GAAA,EAAA,CAAA,M;QACN,SAAS,GAAA,EAAA,CAAA,S;QACT,eAAe,GAAA,EAAA,CAAA,e;AATT,SAAA,wBAAA,GAA2B,IAAI,OAAJ,EAA3B;AAWN,SAAK,KAAL,GAAa,KAAb;;AAEA,QAAI,MAAJ,EAAY;AACV,WAAK,MAAL,GAAc,MAAd;AACD;;AAED,QAAI,SAAJ,EAAe;AACb,WAAK,YAAL,CAAkB,SAAlB;AACD;;AAED,QAAI,eAAJ,EAAqB;AACnB,WAAK,kBAAL,CAAwB,eAAxB;AACD;AACF;;AAEM,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,SAApB,EAAsD;AAAtD,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,SAAL,GAAiB,KAAK,SAAL,IAAkB,EAAnC;;AACA,QAAI,KAAK,CAAC,OAAN,CAAc,SAAd,CAAJ,EAA8B;AAC5B,MAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,aAAD,EAAc;AAC9B,QAAA,KAAI,CAAC,SAAL,GAAiB,SAAS,CAAC,KAAI,CAAC,SAAN,EAAiB,aAAjB,CAA1B;AACD,OAFD;AAGD,KAJD,MAIO;AACL,WAAK,SAAL,GAAiB,SAAS,CAAC,KAAK,SAAN,EAAiB,SAAjB,CAA1B;AACD;AACF,GATM;;AAWA,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,SAApB,EAAsD;AACpD,SAAK,SAAL,GAAiB,EAAjB;AACA,SAAK,YAAL,CAAkB,SAAlB;AACD,GAHM;;AAKA,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACE,WAAO,KAAK,SAAL,IAAkB,EAAzB;AACD,GAFM,CA/CT,CAmDE;AACA;AACA;AACA;;;AACa,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAb,UAAiC,EAAjC,EAYC;QAXC,QAAQ,GAAA,EAAA,CAAA,Q;QACR,YAAY,GAAA,EAAA,CAAA,Y;QACZ,OAAO,GAAA,EAAA,CAAA,O;QACP,SAAS,GAAA,EAAA,CAAA,S;QACT,EAAA,GAAA,EAAA,CAAA,sB;QAAA,sBAAsB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;;;AAQ9B,YAAI,QAAJ,EAAc;AACZ,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,eAAL,CACL,QADK,EAEL,YAAY,CAAC,IAFR,EAGL,OAHK,EAIL,SAJK,EAKL,KAAK,eALA,EAML,sBANK,EAOL,IAPK,CAOA,UAAC,WAAD,EAAY;AAAK,mBAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACnB,YADmB,CAAA,EACP;AACf,cAAA,IAAI,EAAE,WAAW,CAFK;AACP,aADO,CAAA;AAGtB,WAVK,CAAP,CAAA;AAWD;;AAED,eAAA,CAAA;AAAA;AAAA,UAAO,YAAP,CAAA;;;AACD,GA5BY;;AA8BN,EAAA,UAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,eAA1B,EAA0D;AACxD,SAAK,eAAL,GAAuB,eAAvB;AACD,GAFM;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,YAAA;AACE,WAAO,KAAK,eAAZ;AACD,GAFM,CAzFT,CA6FE;AACA;;;AACO,EAAA,UAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,QAAnB,EAAyC;AACvC,QAAI,aAAa,CAAC,CAAC,QAAD,CAAD,EAAa,QAAb,CAAjB,EAAyC;AACvC,UAAI,KAAK,SAAT,EAAoB;AAClB,eAAO,QAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPM,CA/FT,CAwGE;;;AACO,EAAA,UAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,QAAnB,EAAyC;AACvC,WAAO,4BAA4B,CAAC,QAAD,CAAnC;AACD,GAFM;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,OAAtB,EAAmD;AACzC,QAAA,KAAK,GAAK,KAAL,KAAL;AACR,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,OADL,CAAA,EACY;AACV,MAAA,KAAK,EAAA,KADK;AAEV;AACA,MAAA,WAAW,EAAA,UAAC,GAAD,EAAiB;AAC1B,eAAO,KAAK,CAAC,QAAN,CAAe,GAAf,CAAP;AACD;AALS,KADZ,CAAA;AAQD,GAVM,CA7GT,CAyHE;AACA;AACA;;;AACa,EAAA,UAAA,CAAA,SAAA,CAAA,oBAAA,GAAb,UACE,QADF,EAEE,SAFF,EAGE,OAHF,EAGc;AADZ,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAmB,EAAnB;AAA8B;;AAC9B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAAY;;;;AAEZ,YAAI,QAAJ,EAAc;AACZ,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,eAAL,CACL,QADK,EAEL,KAAK,uBAAL,CAA6B,QAA7B,EAAuC,SAAvC,KAAqD,EAFhD,EAGL,KAAK,cAAL,CAAoB,OAApB,CAHK,EAIL,SAJK,EAKL,IALK,CAKA,UAAC,IAAD,EAAK;AAAK,mBAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACZ,SADY,CAAA,EAEZ,IAAI,CAFQ,iBAAA,CAAA;AAGf,WARK,CAAP,CAAA;AASD;;AAED,eAAA,CAAA;AAAA;AAAA,UAAA,QAAA,CAAA,EAAA,EACK,SADL,CAAA,CAAA;;;AAGD,GApBY;;AAsBN,EAAA,UAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,UAA4B,QAA5B,EAA6C;AAC3C,QAAI,cAAc,GAAG,KAArB;AACA,IAAA,KAAK,CAAC,QAAD,EAAW;AACd,MAAA,SAAS,EAAE;AACT,QAAA,KAAK,EAAA,UAAC,IAAD,EAAK;AACR,cAAI,IAAI,CAAC,IAAL,CAAU,KAAV,KAAoB,QAApB,IAAgC,IAAI,CAAC,SAAzC,EAAoD;AAClD,YAAA,cAAc,GAAG,IAAI,CAAC,SAAL,CAAe,IAAf,CACf,UAAC,GAAD,EAAI;AACF,qBAAA,GAAG,CAAC,IAAJ,CAAS,KAAT,KAAmB,QAAnB,IACA,GAAG,CAAC,KAAJ,CAAU,IAAV,KAAmB,cADnB,IAEA,GAAG,CAAC,KAAJ,CAAU,KAAV,KAAoB,IAFpB;AAEwB,aAJX,CAAjB;;AAMA,gBAAI,cAAJ,EAAoB;AAClB,qBAAO,KAAP;AACD;AACF;AACF;AAbQ;AADG,KAAX,CAAL;AAiBA,WAAO,cAAP;AACD,GApBM,CAlJT,CAwKE;;;AACQ,EAAA,UAAA,CAAA,SAAA,CAAA,uBAAA,GAAR,UACE,QADF,EAEE,SAFF,EAEiC;AAE/B,WAAO,KAAK,KAAL,CAAW,IAAX,CAAgB;AACrB,MAAA,KAAK,EAAE,0BAA0B,CAAC,QAAD,CADZ;AAErB,MAAA,SAAS,EAAA,SAFY;AAGrB,MAAA,iBAAiB,EAAE,IAHE;AAIrB,MAAA,UAAU,EAAE;AAJS,KAAhB,EAKJ,MALH;AAMD,GAVO;;AAYM,EAAA,UAAA,CAAA,SAAA,CAAA,eAAA,GAAd,UACE,QADF,EAEE,SAFF,EAGE,OAHF,EAIE,SAJF,EAKE,eALF,EAME,sBANF,EAMyC;AAHvC,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAAiB;;AACjB,QAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,SAAA,GAAA,EAAA;AAA2B;;AAC3B,QAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,eAAA,GAAA,YAAA;AAAyC,eAAA,IAAA;AAAI,OAA7C;AAA6C;;AAC7C,QAAA,sBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,sBAAA,GAAA,KAAA;AAAuC;;;;;;AAEjC,QAAA,cAAc,GAAG,iBAAiB,CACtC,QADsC,CAAlC;AAGA,QAAA,SAAS,GAAG,sBAAsB,CAAC,QAAD,CAAlC;AACA,QAAA,WAAW,GAAG,iBAAiB,CAAC,SAAD,CAA/B;AACA,QAAA,mBAAmB,GAAG,KAAK,0BAAL,CAC1B,cAD0B,EAE1B,WAF0B,CAAtB;AAKA,QAAA,mBAAmB,GAAG,cAAc,CAAC,SAArC;AAEA,QAAA,oBAAoB,GACxB,mBAAmB,GACjB,mBAAmB,CAAC,MAApB,CAA2B,CAA3B,EAA8B,WAA9B,KACA,mBAAmB,CAAC,KAApB,CAA0B,CAA1B,CAFiB,GAGjB,OAJE;AAMA,QAAA,EAAA,GAAoB,IAApB,EAAE,KAAK,GAAA,EAAA,CAAA,KAAP,EAAS,MAAM,GAAA,EAAA,CAAA,MAAf;AACA,QAAA,WAAW,GAAgB;AAC/B,UAAA,WAAW,EAAA,WADoB;AAE/B,UAAA,OAAO,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACF,OADE,CAAA,EACK;AACV,YAAA,KAAK,EAAA,KADK;AAEV,YAAA,MAAM,EAAA;AAFI,WADL,CAFwB;AAO/B,UAAA,SAAS,EAAA,SAPsB;AAQ/B,UAAA,eAAe,EAAA,eARgB;AAS/B,UAAA,oBAAoB,EAAA,oBATW;AAU/B,UAAA,iBAAiB,EAAE,EAVY;AAW/B,UAAA,mBAAmB,EAAA,mBAXY;AAY/B,UAAA,sBAAsB,EAAA;AAZS,SAA3B;AAcA,QAAA,uBAAuB,GAAG,KAA1B;AAEN,eAAA,CAAA;AAAA;AAAA,UAAO,KAAK,mBAAL,CACL,cAAc,CAAC,YADV,EAEL,uBAFK,EAGL,SAHK,EAIL,WAJK,EAKL,IALK,CAKA,UAAC,MAAD,EAAO;AAAK,iBAAC;AAClB,YAAA,MAAM,EAAA,MADY;AAElB,YAAA,iBAAiB,EAAE,WAAW,CAAC;AAFb,WAAD;AAGjB,SARK,CAAP,CAAA;;;AASD,GApDa;;AAsDA,EAAA,UAAA,CAAA,SAAA,CAAA,mBAAA,GAAd,UACE,YADF,EAEE,uBAFF,EAGE,SAHF,EAIE,WAJF,EAI0B;;;;;;;AAEhB,QAAA,WAAW,GAAyB,WAAW,CAApC,WAAX,EAAa,OAAO,GAAgB,WAAW,CAA3B,OAApB,EAAsB,SAAS,GAAK,WAAW,CAAhB,SAA/B;AACF,QAAA,cAAc,GAAY,CAAC,SAAD,CAA1B;;AAEA,QAAA,OAAO,GAAG,UAAO,SAAP,EAA+B;AAAA,iBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AAC7C,kBACE,CAAC,uBAAD,IACA,CAAC,WAAW,CAAC,mBAAZ,CAAgC,GAAhC,CAAoC,SAApC,CAFH,EAGE;AACA;AACA;AACA,uBAAA,CAAA;AAAA;AAAA,iBAAA;AACD;;AACD,kBAAI,CAAC,aAAa,CAAC,SAAD,EAAY,SAAZ,CAAlB,EAA0C;AACxC;AACA,uBAAA,CAAA;AAAA;AAAA,iBAAA;AACD;;AAED,kBAAI,OAAO,CAAC,SAAD,CAAX,EAAwB;AACtB,uBAAA,CAAA;AAAA;AAAA,kBAAO,KAAK,YAAL,CACL,SADK,EAEL,uBAFK,EAGL,SAHK,EAIL,WAJK,EAKL,IALK,CAKA,UAAC,WAAD,EAAY;;;AACjB,sBAAI,OAAO,WAAP,KAAuB,WAA3B,EAAwC;AACtC,oBAAA,cAAc,CAAC,IAAf,EAAoB,EAAA,GAAA,EAAA,EAClB,EAAA,CAAC,sBAAsB,CAAC,SAAD,CAAvB,CAAA,GAAqC,WADnB,EAEV,EAFV;AAGD;AACF,iBAXM,CAAP,CAAA;AAYD;;AAID,kBAAI,gBAAgB,CAAC,SAAD,CAApB,EAAiC;AAC/B,gBAAA,QAAQ,GAAG,SAAX;AACD,eAFD,MAEO;AACL;AACA,gBAAA,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,IAAV,CAAe,KAAhB,CAAtB;AACA,gBAAA,SAAS,CAAC,QAAD,EAAW,EAAX,EAAW,SAAA,CAAA,IAAA,CAAA,KAAX,CAAT;AACD;;AAED,kBAAI,QAAQ,IAAI,QAAQ,CAAC,aAAzB,EAAwC;AAChC,gBAAA,aAAa,GAAG,QAAQ,CAAC,aAAT,CAAuB,IAAvB,CAA4B,KAA5C;;AACN,oBAAI,WAAW,CAAC,eAAZ,CAA4B,SAA5B,EAAuC,aAAvC,EAAsD,OAAtD,CAAJ,EAAoE;AAClE,yBAAA,CAAA;AAAA;AAAA,oBAAO,KAAK,mBAAL,CACL,QAAQ,CAAC,YADJ,EAEL,uBAFK,EAGL,SAHK,EAIL,WAJK,EAKL,IALK,CAKA,UAAC,cAAD,EAAe;AACpB,oBAAA,cAAc,CAAC,IAAf,CAAoB,cAApB;AACD,mBAPM,CAAP,CAAA;AAQD;AACF;;;;;;WAnD4C,CAAA;AAoD9C,SApDK;;AAsDN,eAAA,CAAA;AAAA;AAAA,UAAO,OAAO,CAAC,GAAR,CAAY,YAAY,CAAC,UAAb,CAAwB,GAAxB,CAA4B,OAA5B,CAAZ,EAAkD,IAAlD,CAAuD,YAAA;AAC5D,iBAAO,cAAc,CAAC,cAAD,CAArB;AACD,SAFM,CAAP,CAAA;;;AAGD,GAlEa;;AAoEA,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAd,UACE,KADF,EAEE,uBAFF,EAGE,SAHF,EAIE,WAJF,EAI0B;;;;;;;AAExB,YAAI,CAAC,SAAL,EAAgB;AACd,iBAAA,CAAA;AAAA;AAAA,YAAO,IAAP,CAAA;AACD;;AAEO,QAAA,SAAS,GAAK,WAAW,CAAhB,SAAT;AACF,QAAA,SAAS,GAAG,KAAK,CAAC,IAAN,CAAW,KAAvB;AACA,QAAA,gBAAgB,GAAG,sBAAsB,CAAC,KAAD,CAAzC;AACA,QAAA,SAAS,GAAG,SAAS,KAAK,gBAA1B;AACA,QAAA,aAAa,GAAG,SAAS,CAAC,gBAAD,CAAT,IAA+B,SAAS,CAAC,SAAD,CAAxD;AACF,QAAA,aAAa,GAAG,OAAO,CAAC,OAAR,CAAgB,aAAhB,CAAhB,C,CAEJ;AACA;AACA;AACA;;AACA,YACE,CAAC,WAAW,CAAC,sBAAb,IACA,KAAK,oBAAL,CAA0B,KAA1B,CAFF,EAGE;AACM,UAAA,YAAY,GAChB,SAAS,CAAC,UAAV,IAAwB,WAAW,CAAC,oBADhC;AAEA,UAAA,WAAW,GAAG,KAAK,SAAL,IAAkB,KAAK,SAAL,CAAe,YAAf,CAAhC;;AACN,cAAI,WAAJ,EAAiB;AACT,YAAA,OAAO,GAAG,WAAW,CAAC,SAAS,GAAG,SAAH,GAAe,gBAAzB,CAArB;;AACN,gBAAI,OAAJ,EAAa;AACX,cAAA,aAAa,GAAG,OAAO,CAAC,OAAR,EACd;AACA;AACA,cAAA,SAAS,CAAC,SAAV,CAAoB,KAAK,KAAzB,EAAgC,OAAhC,EAAyC,CACvC,SADuC,EAEvC,wBAAwB,CAAC,KAAD,EAAQ,SAAR,CAFe,EAGvC,WAAW,CAAC,OAH2B,EAIvC;AAAE,gBAAA,KAAK,EAAA,KAAP;AAAS,gBAAA,WAAW,EAAE,WAAW,CAAC;AAAlC,eAJuC,CAAzC,CAHc,CAAhB;AAUD;AACF;AACF;;AAED,eAAA,CAAA;AAAA;AAAA,UAAO,aAAa,CAAC,IAAd,CAAmB,UAAC,MAAD,EAAuB;;;AAAtB,cAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,YAAA,MAAA,GAAA,aAAA;AAAsB,WAAA,CAC/C;AACA;;;AACA,cAAI,KAAK,CAAC,UAAV,EAAsB;AACpB,YAAA,KAAK,CAAC,UAAN,CAAiB,OAAjB,CAAyB,UAAC,SAAD,EAAU;AACjC,kBAAI,SAAS,CAAC,IAAV,CAAe,KAAf,KAAyB,QAAzB,IAAqC,SAAS,CAAC,SAAnD,EAA8D;AAC5D,gBAAA,SAAS,CAAC,SAAV,CAAoB,OAApB,CAA4B,UAAC,GAAD,EAAI;AAC9B,sBAAI,GAAG,CAAC,IAAJ,CAAS,KAAT,KAAmB,IAAnB,IAA2B,GAAG,CAAC,KAAJ,CAAU,IAAV,KAAmB,aAAlD,EAAiE;AAC/D,oBAAA,WAAW,CAAC,iBAAZ,CAA8B,GAAG,CAAC,KAAJ,CAAU,KAAxC,IAAiD,MAAjD;AACD;AACF,iBAJD;AAKD;AACF,aARD;AASD,WAb8C,CAe/C;;;AACA,cAAI,CAAC,KAAK,CAAC,YAAX,EAAyB;AACvB,mBAAO,MAAP;AACD,WAlB8C,CAoB/C;AACA;;;AACA,cAAI,MAAM,IAAI,IAAd,EAAoB;AAClB;AACA,mBAAO,MAAP;AACD;;AAED,cAAM,aAAa,GACjB,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,CAAC,UAAN,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,IAAF,CAAO,UAAC,CAAD,EAAE;AAAK,mBAAA,CAAC,CAAC,IAAF,CAAO,KAAP,KAAA,QAAA;AAAyB,WAAvC,CAAhB,MAAwD,IAAxD,IAAwD,EAAA,KAAA,KAAA,CAAxD,GAAwD,EAAxD,GAA4D,KAD9D;;AAGA,cAAI,KAAK,CAAC,OAAN,CAAc,MAAd,CAAJ,EAA2B;AACzB,mBAAO,KAAI,CAAC,uBAAL,CACL,KADK,EAEL,uBAAuB,IAAI,aAFtB,EAGL,MAHK,EAIL,WAJK,CAAP;AAMD,WArC8C,CAuC/C;;;AACA,cAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,mBAAO,KAAI,CAAC,mBAAL,CACL,KAAK,CAAC,YADD,EAEL,uBAAuB,IAAI,aAFtB,EAGL,MAHK,EAIL,WAJK,CAAP;AAMD;AACF,SAhDM,CAAP,CAAA;;;AAiDD,GA9Fa;;AAgGN,EAAA,UAAA,CAAA,SAAA,CAAA,uBAAA,GAAR,UACE,KADF,EAEE,uBAFF,EAGE,MAHF,EAIE,WAJF,EAI0B;AAJ1B,QAAA,KAAA,GAAA,IAAA;;AAME,WAAO,OAAO,CAAC,GAAR,CACL,MAAM,CAAC,GAAP,CAAW,UAAC,IAAD,EAAK;AACd,UAAI,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAO,IAAP;AACD,OAHa,CAKd;;;AACA,UAAI,KAAK,CAAC,OAAN,CAAc,IAAd,CAAJ,EAAyB;AACvB,eAAO,KAAI,CAAC,uBAAL,CACL,KADK,EAEL,uBAFK,EAGL,IAHK,EAIL,WAJK,CAAP;AAMD,OAba,CAed;;;AACA,UAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,eAAO,KAAI,CAAC,mBAAL,CACL,KAAK,CAAC,YADD,EAEL,uBAFK,EAGL,IAHK,EAIL,WAJK,CAAP;AAMD;AACF,KAxBD,CADK,CAAP;AA2BD,GAjCO,CA/YV,CAkbE;AACA;AACA;;;AACQ,EAAA,UAAA,CAAA,SAAA,CAAA,0BAAA,GAAR,UACE,cADF,EAEE,WAFF,EAE0B;AAExB,QAAM,eAAe,GAAG,UACtB,IADsB,EACY;AACd,aAAA,CAAC,KAAK,CAAC,OAAN,CAAD,IAAC,CAAD;AAAoB,KAF1C;;AAGA,QAAM,wBAAwB,GAAG,KAAK,wBAAtC;;AAEA,aAAS,mBAAT,CACE,cADF,EAC0C;AAExC,UAAI,CAAC,wBAAwB,CAAC,GAAzB,CAA6B,cAA7B,CAAL,EAAmD;AACjD,YAAM,SAAO,GAAG,IAAI,GAAJ,EAAhB;AACA,QAAA,wBAAwB,CAAC,GAAzB,CAA6B,cAA7B,EAA6C,SAA7C;AAEA,QAAA,KAAK,CAAC,cAAD,EAAiB;AACpB,UAAA,SAAS,EAAA,UAAC,IAAD,EAAsB,CAAtB,EAAyB,EAAzB,EAA6B,GAA7B,EAAkC,SAAlC,EAA2C;AAClD,gBAAI,IAAI,CAAC,IAAL,CAAU,KAAV,KAAoB,QAAxB,EAAkC;AAChC,cAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,IAAD,EAAK;AACrB,oBAAI,eAAe,CAAC,IAAD,CAAf,IAAyB,eAAe,CAAC,IAAD,CAA5C,EAAoD;AAClD,kBAAA,SAAO,CAAC,GAAR,CAAY,IAAZ;AACD;AACF,eAJD;AAKD;AACF,WATmB;AAUpB,UAAA,cAAc,EAAA,UAAC,MAAD,EAA6B,CAA7B,EAAgC,EAAhC,EAAoC,GAApC,EAAyC,SAAzC,EAAkD;AAC9D,gBAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,IAAP,CAAY,KAAb,CAA5B;AACA,YAAA,SAAS,CAAC,QAAD,EAAW,EAAX,EAAW,MAAA,CAAA,IAAA,CAAA,KAAX,CAAT;AAEA,gBAAM,kBAAkB,GAAG,mBAAmB,CAAC,QAAD,CAA9C;;AACA,gBAAI,kBAAkB,CAAC,IAAnB,GAA0B,CAA9B,EAAiC;AAC/B;AACA;AACA,cAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,IAAD,EAAK;AACrB,oBAAI,eAAe,CAAC,IAAD,CAAf,IAAyB,eAAe,CAAC,IAAD,CAA5C,EAAoD;AAClD,kBAAA,SAAO,CAAC,GAAR,CAAY,IAAZ;AACD;AACF,eAJD;AAKA,cAAA,SAAO,CAAC,GAAR,CAAY,MAAZ;AACA,cAAA,kBAAkB,CAAC,OAAnB,CAA2B,UAAC,SAAD,EAAU;AACnC,gBAAA,SAAO,CAAC,GAAR,CAAY,SAAZ;AACD,eAFD;AAGD;AACF;AA5BmB,SAAjB,CAAL;AA8BD;;AACD,aAAO,wBAAwB,CAAC,GAAzB,CAA6B,cAA7B,CAAP;AACD;;AACD,WAAO,mBAAmB,CAAC,cAAD,CAA1B;AACD,GAlDO;;AAmDV,SAAA,UAAA;AAAC,CAxeD,EAAA","sourcesContent":["import { invariant } from \"../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  SelectionNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  FieldNode,\n  ASTNode,\n  DirectiveNode,\n  FragmentSpreadNode,\n  ExecutableDefinitionNode,\n} from \"graphql\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\n\nimport type { ApolloCache } from \"../cache/index.js\";\nimport type { FragmentMap, StoreObject } from \"../utilities/index.js\";\nimport {\n  argumentsObjectFromField,\n  buildQueryFromSelectionSet,\n  createFragmentMap,\n  getFragmentDefinitions,\n  getMainDefinition,\n  hasDirectives,\n  isField,\n  isInlineFragment,\n  mergeDeep,\n  mergeDeepArray,\n  removeClientSetsFromDocument,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"../utilities/index.js\";\nimport type { ApolloClient } from \"./ApolloClient.js\";\nimport type { Resolvers, OperationVariables } from \"./types.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\n\nexport type Resolver = (\n  rootValue?: any,\n  args?: any,\n  context?: any,\n  info?: {\n    field: FieldNode;\n    fragmentMap: FragmentMap;\n  }\n) => any;\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: any\n) => boolean;\n\nexport type ExecContext = {\n  fragmentMap: FragmentMap;\n  context: any;\n  variables: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n  defaultOperationType: string;\n  exportedVariables: Record<string, any>;\n  onlyRunForcedResolvers: boolean;\n  selectionsToResolve: Set<SelectionNode>;\n};\n\nexport type LocalStateOptions<TCacheShape> = {\n  cache: ApolloCache<TCacheShape>;\n  client?: ApolloClient<TCacheShape>;\n  resolvers?: Resolvers | Resolvers[];\n  fragmentMatcher?: FragmentMatcher;\n};\n\nexport class LocalState<TCacheShape> {\n  private cache: ApolloCache<TCacheShape>;\n  private client?: ApolloClient<TCacheShape>;\n  private resolvers?: Resolvers;\n  private fragmentMatcher?: FragmentMatcher;\n  private selectionsToResolveCache = new WeakMap<\n    ExecutableDefinitionNode,\n    Set<SelectionNode>\n  >();\n\n  constructor({\n    cache,\n    client,\n    resolvers,\n    fragmentMatcher,\n  }: LocalStateOptions<TCacheShape>) {\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  public addResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach((resolverGroup) => {\n        this.resolvers = mergeDeep(this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  }\n\n  public setResolvers(resolvers: Resolvers | Resolvers[]) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  }\n\n  public getResolvers() {\n    return this.resolvers || {};\n  }\n\n  // Run local client resolvers against the incoming query and remote data.\n  // Locally resolved field values are merged with the incoming remote data,\n  // and returned. Note that locally resolved fields will overwrite\n  // remote data using the same field name.\n  public async runResolvers<TData>({\n    document,\n    remoteResult,\n    context,\n    variables,\n    onlyRunForcedResolvers = false,\n  }: {\n    document: DocumentNode | null;\n    remoteResult: FetchResult<TData>;\n    context?: Record<string, any>;\n    variables?: Record<string, any>;\n    onlyRunForcedResolvers?: boolean;\n  }): Promise<FetchResult<TData>> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        remoteResult.data,\n        context,\n        variables,\n        this.fragmentMatcher,\n        onlyRunForcedResolvers\n      ).then((localResult) => ({\n        ...remoteResult,\n        data: localResult.result,\n      }));\n    }\n\n    return remoteResult;\n  }\n\n  public setFragmentMatcher(fragmentMatcher: FragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  }\n\n  public getFragmentMatcher(): FragmentMatcher | undefined {\n    return this.fragmentMatcher;\n  }\n\n  // Client queries contain everything in the incoming document (if a @client\n  // directive is found).\n  public clientQuery(document: DocumentNode) {\n    if (hasDirectives([\"client\"], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  }\n\n  // Server queries are stripped of all @client based selection sets.\n  public serverQuery(document: DocumentNode) {\n    return removeClientSetsFromDocument(document);\n  }\n\n  public prepareContext(context?: Record<string, any>) {\n    const { cache } = this;\n    return {\n      ...context,\n      cache,\n      // Getting an entry's cache key is useful for local state resolvers.\n      getCacheKey(obj: StoreObject) {\n        return cache.identify(obj);\n      },\n    };\n  }\n\n  // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n  // @client @export fields locally, then pass the resolved values back to be\n  // used alongside the original operation variables.\n  public async addExportedVariables<TVars extends OperationVariables>(\n    document: DocumentNode,\n    variables: TVars = {} as TVars,\n    context = {}\n  ): /* returns at least the variables that were passed in */ Promise<TVars> {\n    if (document) {\n      return this.resolveDocument(\n        document,\n        this.buildRootValueFromCache(document, variables) || {},\n        this.prepareContext(context),\n        variables\n      ).then((data) => ({\n        ...variables,\n        ...data.exportedVariables,\n      }));\n    }\n\n    return {\n      ...variables,\n    };\n  }\n\n  public shouldForceResolvers(document: ASTNode) {\n    let forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter(node) {\n          if (node.name.value === \"client\" && node.arguments) {\n            forceResolvers = node.arguments.some(\n              (arg) =>\n                arg.name.value === \"always\" &&\n                arg.value.kind === \"BooleanValue\" &&\n                arg.value.value === true\n            );\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        },\n      },\n    });\n    return forceResolvers;\n  }\n\n  // Query the cache and return matching data.\n  private buildRootValueFromCache(\n    document: DocumentNode,\n    variables?: Record<string, any>\n  ) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables,\n      returnPartialData: true,\n      optimistic: false,\n    }).result;\n  }\n\n  private async resolveDocument<TData>(\n    document: DocumentNode,\n    rootValue: TData,\n    context: any = {},\n    variables: VariableMap = {},\n    fragmentMatcher: FragmentMatcher = () => true,\n    onlyRunForcedResolvers: boolean = false\n  ) {\n    const mainDefinition = getMainDefinition(\n      document\n    ) as OperationDefinitionNode;\n    const fragments = getFragmentDefinitions(document);\n    const fragmentMap = createFragmentMap(fragments);\n    const selectionsToResolve = this.collectSelectionsToResolve(\n      mainDefinition,\n      fragmentMap\n    );\n\n    const definitionOperation = mainDefinition.operation;\n\n    const defaultOperationType =\n      definitionOperation ?\n        definitionOperation.charAt(0).toUpperCase() +\n        definitionOperation.slice(1)\n      : \"Query\";\n\n    const { cache, client } = this;\n    const execContext: ExecContext = {\n      fragmentMap,\n      context: {\n        ...context,\n        cache,\n        client,\n      },\n      variables,\n      fragmentMatcher,\n      defaultOperationType,\n      exportedVariables: {},\n      selectionsToResolve,\n      onlyRunForcedResolvers,\n    };\n    const isClientFieldDescendant = false;\n\n    return this.resolveSelectionSet(\n      mainDefinition.selectionSet,\n      isClientFieldDescendant,\n      rootValue,\n      execContext\n    ).then((result) => ({\n      result,\n      exportedVariables: execContext.exportedVariables,\n    }));\n  }\n\n  private async resolveSelectionSet<TData>(\n    selectionSet: SelectionSetNode,\n    isClientFieldDescendant: boolean,\n    rootValue: TData,\n    execContext: ExecContext\n  ) {\n    const { fragmentMap, context, variables } = execContext;\n    const resultsToMerge: TData[] = [rootValue];\n\n    const execute = async (selection: SelectionNode): Promise<void> => {\n      if (\n        !isClientFieldDescendant &&\n        !execContext.selectionsToResolve.has(selection)\n      ) {\n        // Skip selections without @client directives\n        // (still processing if one of the ancestors or one of the child fields has @client directive)\n        return;\n      }\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely.\n        return;\n      }\n\n      if (isField(selection)) {\n        return this.resolveField(\n          selection,\n          isClientFieldDescendant,\n          rootValue,\n          execContext\n        ).then((fieldResult) => {\n          if (typeof fieldResult !== \"undefined\") {\n            resultsToMerge.push({\n              [resultKeyNameFromField(selection)]: fieldResult,\n            } as TData);\n          }\n        });\n      }\n\n      let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n      if (isInlineFragment(selection)) {\n        fragment = selection;\n      } else {\n        // This is a named fragment.\n        fragment = fragmentMap[selection.name.value];\n        invariant(fragment, `No fragment named %s`, selection.name.value);\n      }\n\n      if (fragment && fragment.typeCondition) {\n        const typeCondition = fragment.typeCondition.name.value;\n        if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n          return this.resolveSelectionSet(\n            fragment.selectionSet,\n            isClientFieldDescendant,\n            rootValue,\n            execContext\n          ).then((fragmentResult) => {\n            resultsToMerge.push(fragmentResult);\n          });\n        }\n      }\n    };\n\n    return Promise.all(selectionSet.selections.map(execute)).then(function () {\n      return mergeDeepArray(resultsToMerge);\n    });\n  }\n\n  private async resolveField(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    rootValue: any,\n    execContext: ExecContext\n  ): Promise<any> {\n    if (!rootValue) {\n      return null;\n    }\n\n    const { variables } = execContext;\n    const fieldName = field.name.value;\n    const aliasedFieldName = resultKeyNameFromField(field);\n    const aliasUsed = fieldName !== aliasedFieldName;\n    const defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n    let resultPromise = Promise.resolve(defaultResult);\n\n    // Usually all local resolvers are run when passing through here, but\n    // if we've specifically identified that we only want to run forced\n    // resolvers (that is, resolvers for fields marked with\n    // `@client(always: true)`), then we'll skip running non-forced resolvers.\n    if (\n      !execContext.onlyRunForcedResolvers ||\n      this.shouldForceResolvers(field)\n    ) {\n      const resolverType =\n        rootValue.__typename || execContext.defaultOperationType;\n      const resolverMap = this.resolvers && this.resolvers[resolverType];\n      if (resolverMap) {\n        const resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n        if (resolve) {\n          resultPromise = Promise.resolve(\n            // In case the resolve function accesses reactive variables,\n            // set cacheSlot to the current cache instance.\n            cacheSlot.withValue(this.cache, resolve, [\n              rootValue,\n              argumentsObjectFromField(field, variables),\n              execContext.context,\n              { field, fragmentMap: execContext.fragmentMap },\n            ])\n          );\n        }\n      }\n    }\n\n    return resultPromise.then((result = defaultResult) => {\n      // If an @export directive is associated with the current field, store\n      // the `as` export variable name and current result for later use.\n      if (field.directives) {\n        field.directives.forEach((directive) => {\n          if (directive.name.value === \"export\" && directive.arguments) {\n            directive.arguments.forEach((arg) => {\n              if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                execContext.exportedVariables[arg.value.value] = result;\n              }\n            });\n          }\n        });\n      }\n\n      // Handle all scalar types here.\n      if (!field.selectionSet) {\n        return result;\n      }\n\n      // From here down, the field has a selection set, which means it's trying\n      // to query a GraphQLObjectType.\n      if (result == null) {\n        // Basically any field in a GraphQL response can be null, or missing\n        return result;\n      }\n\n      const isClientField =\n        field.directives?.some((d) => d.name.value === \"client\") ?? false;\n\n      if (Array.isArray(result)) {\n        return this.resolveSubSelectedArray(\n          field,\n          isClientFieldDescendant || isClientField,\n          result,\n          execContext\n        );\n      }\n\n      // Returned value is an object, and the query has a sub-selection. Recurse.\n      if (field.selectionSet) {\n        return this.resolveSelectionSet(\n          field.selectionSet,\n          isClientFieldDescendant || isClientField,\n          result,\n          execContext\n        );\n      }\n    });\n  }\n\n  private resolveSubSelectedArray(\n    field: FieldNode,\n    isClientFieldDescendant: boolean,\n    result: any[],\n    execContext: ExecContext\n  ): any {\n    return Promise.all(\n      result.map((item) => {\n        if (item === null) {\n          return null;\n        }\n\n        // This is a nested array, recurse.\n        if (Array.isArray(item)) {\n          return this.resolveSubSelectedArray(\n            field,\n            isClientFieldDescendant,\n            item,\n            execContext\n          );\n        }\n\n        // This is an object, run the selection set on it.\n        if (field.selectionSet) {\n          return this.resolveSelectionSet(\n            field.selectionSet,\n            isClientFieldDescendant,\n            item,\n            execContext\n          );\n        }\n      })\n    );\n  }\n\n  // Collect selection nodes on paths from document root down to all @client directives.\n  // This function takes into account transitive fragment spreads.\n  // Complexity equals to a single `visit` over the full document.\n  private collectSelectionsToResolve(\n    mainDefinition: OperationDefinitionNode,\n    fragmentMap: FragmentMap\n  ): Set<SelectionNode> {\n    const isSingleASTNode = (\n      node: ASTNode | readonly ASTNode[]\n    ): node is ASTNode => !Array.isArray(node);\n    const selectionsToResolveCache = this.selectionsToResolveCache;\n\n    function collectByDefinition(\n      definitionNode: ExecutableDefinitionNode\n    ): Set<SelectionNode> {\n      if (!selectionsToResolveCache.has(definitionNode)) {\n        const matches = new Set<SelectionNode>();\n        selectionsToResolveCache.set(definitionNode, matches);\n\n        visit(definitionNode, {\n          Directive(node: DirectiveNode, _, __, ___, ancestors) {\n            if (node.name.value === \"client\") {\n              ancestors.forEach((node) => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              });\n            }\n          },\n          FragmentSpread(spread: FragmentSpreadNode, _, __, ___, ancestors) {\n            const fragment = fragmentMap[spread.name.value];\n            invariant(fragment, `No fragment named %s`, spread.name.value);\n\n            const fragmentSelections = collectByDefinition(fragment);\n            if (fragmentSelections.size > 0) {\n              // Fragment for this spread contains @client directive (either directly or transitively)\n              // Collect selection nodes on paths from the root down to fields with the @client directive\n              ancestors.forEach((node) => {\n                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                  matches.add(node);\n                }\n              });\n              matches.add(spread);\n              fragmentSelections.forEach((selection) => {\n                matches.add(selection);\n              });\n            }\n          },\n        });\n      }\n      return selectionsToResolveCache.get(definitionNode)!;\n    }\n    return collectByDefinition(mainDefinition);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}