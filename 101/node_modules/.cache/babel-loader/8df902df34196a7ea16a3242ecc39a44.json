{"ast":null,"code":"import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation } from \"../utils/index.js\";\n\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\n\nfunction toLink(handler) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\n\nvar ApolloLink =\n/** @class */\nfunction () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n\n  ApolloLink.empty = function () {\n    return new ApolloLink(function () {\n      return Observable.of();\n    });\n  };\n\n  ApolloLink.from = function (links) {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce(function (x, y) {\n      return x.concat(y);\n    });\n  };\n\n  ApolloLink.split = function (test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(function (operation) {\n        return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.execute = function (link, operation) {\n    return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n  };\n\n  ApolloLink.concat = function (first, second) {\n    var firstLink = toLink(first);\n\n    if (isTerminating(firstLink)) {\n      globalThis.__DEV__ !== false && invariant.warn(35, firstLink);\n      return firstLink;\n    }\n\n    var nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(function (operation) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op) || Observable.of();\n        }) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of();\n      });\n    }\n  };\n\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n  };\n\n  ApolloLink.prototype.concat = function (next) {\n    return ApolloLink.concat(this, next);\n  };\n\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw newInvariantError(36);\n  };\n\n  ApolloLink.prototype.onError = function (error, observer) {\n    if (observer && observer.error) {\n      observer.error(error); // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n\n      return false;\n    } // Throw errors will be passed to observer.error.\n\n\n    throw error;\n  };\n\n  ApolloLink.prototype.setOnError = function (fn) {\n    this.onError = fn;\n    return this;\n  };\n\n  return ApolloLink;\n}();\n\nexport { ApolloLink };","map":{"version":3,"sources":["../../../src/link/core/ApolloLink.ts"],"names":[],"mappings":"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","sourcesContent":["import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\n\nimport type { Observer } from \"../../utilities/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport type {\n  NextLink,\n  Operation,\n  RequestHandler,\n  FetchResult,\n  GraphQLRequest,\n} from \"./types.js\";\nimport {\n  validateOperation,\n  createOperation,\n  transformOperation,\n} from \"../utils/index.js\";\n\nfunction passthrough(op: Operation, forward: NextLink) {\n  return (forward ? forward(op) : Observable.of()) as Observable<FetchResult>;\n}\n\nfunction toLink(handler: RequestHandler | ApolloLink) {\n  return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\n\nfunction isTerminating(link: ApolloLink): boolean {\n  return link.request.length <= 1;\n}\n\nexport class ApolloLink {\n  public static empty(): ApolloLink {\n    return new ApolloLink(() => Observable.of());\n  }\n\n  public static from(links: (ApolloLink | RequestHandler)[]): ApolloLink {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce((x, y) => x.concat(y)) as ApolloLink;\n  }\n\n  public static split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    const leftLink = toLink(left);\n    const rightLink = toLink(right || new ApolloLink(passthrough));\n\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink((operation) => {\n        return test(operation) ?\n            leftLink.request(operation) || Observable.of()\n          : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return test(operation) ?\n            leftLink.request(operation, forward) || Observable.of()\n          : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  }\n\n  public static execute(\n    link: ApolloLink,\n    operation: GraphQLRequest\n  ): Observable<FetchResult> {\n    return (\n      link.request(\n        createOperation(\n          operation.context,\n          transformOperation(validateOperation(operation))\n        )\n      ) || Observable.of()\n    );\n  }\n\n  public static concat(\n    first: ApolloLink | RequestHandler,\n    second: ApolloLink | RequestHandler\n  ) {\n    const firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      invariant.warn(\n        `You are calling concat on a terminating link, which will have no effect %o`,\n        firstLink\n      );\n      return firstLink;\n    }\n    const nextLink = toLink(second);\n\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(\n        (operation) =>\n          firstLink.request(\n            operation,\n            (op) => nextLink.request(op) || Observable.of()\n          ) || Observable.of()\n      );\n    } else {\n      return new ApolloLink((operation, forward) => {\n        return (\n          firstLink.request(operation, (op) => {\n            return nextLink.request(op, forward) || Observable.of();\n          }) || Observable.of()\n        );\n      });\n    }\n  }\n\n  constructor(request?: RequestHandler) {\n    if (request) this.request = request;\n  }\n\n  public split(\n    test: (op: Operation) => boolean,\n    left: ApolloLink | RequestHandler,\n    right?: ApolloLink | RequestHandler\n  ): ApolloLink {\n    return this.concat(\n      ApolloLink.split(test, left, right || new ApolloLink(passthrough))\n    );\n  }\n\n  public concat(next: ApolloLink | RequestHandler): ApolloLink {\n    return ApolloLink.concat(this, next);\n  }\n\n  public request(\n    operation: Operation,\n    forward?: NextLink\n  ): Observable<FetchResult> | null {\n    throw newInvariantError(\"request is not implemented\");\n  }\n\n  protected onError(\n    error: any,\n    observer?: Observer<FetchResult>\n  ): false | void {\n    if (observer && observer.error) {\n      observer.error(error);\n      // Returning false indicates that observer.error does not need to be\n      // called again, since it was already called (on the previous line).\n      // Calling observer.error again would not cause any real problems,\n      // since only the first call matters, but custom onError functions\n      // might have other reasons for wanting to prevent the default\n      // behavior by returning false.\n      return false;\n    }\n    // Throw errors will be passed to observer.error.\n    throw error;\n  }\n\n  public setOnError(fn: ApolloLink[\"onError\"]): this {\n    this.onError = fn;\n    return this;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}