{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from \"react\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useMutation(mutation, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n\n  var _a = React.useState({\n    called: false,\n    loading: false,\n    client: client\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var ref = React.useRef({\n    result: result,\n    mutationId: 0,\n    isMounted: true,\n    client: client,\n    mutation: mutation,\n    options: options\n  }); // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n\n  {\n    Object.assign(ref.current, {\n      client: client,\n      options: options,\n      mutation: mutation\n    });\n  }\n  var execute = React.useCallback(function (executeOptions) {\n    if (executeOptions === void 0) {\n      executeOptions = {};\n    }\n\n    var _a = ref.current,\n        options = _a.options,\n        mutation = _a.mutation;\n\n    var baseOptions = __assign(__assign({}, options), {\n      mutation: mutation\n    });\n\n    var client = executeOptions.client || ref.current.client;\n\n    if (!ref.current.result.loading && !baseOptions.ignoreResults && ref.current.isMounted) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client: client\n      });\n    }\n\n    var mutationId = ++ref.current.mutationId;\n    var clientOptions = mergeOptions(baseOptions, executeOptions);\n    return client.mutate(clientOptions).then(function (response) {\n      var _a, _b;\n\n      var data = response.data,\n          errors = response.errors;\n      var error = errors && errors.length > 0 ? new ApolloError({\n        graphQLErrors: errors\n      }) : void 0;\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n\n      if (error && onError) {\n        onError(error, clientOptions);\n      }\n\n      if (mutationId === ref.current.mutationId && !clientOptions.ignoreResults) {\n        var result_1 = {\n          called: true,\n          loading: false,\n          data: data,\n          error: error,\n          client: client\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result_1)) {\n          setResult(ref.current.result = result_1);\n        }\n      }\n\n      var onCompleted = executeOptions.onCompleted || ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onCompleted);\n\n      if (!error) {\n        onCompleted === null || onCompleted === void 0 ? void 0 : onCompleted(response.data, clientOptions);\n      }\n\n      return response;\n    }).catch(function (error) {\n      var _a;\n\n      if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n        var result_2 = {\n          loading: false,\n          error: error,\n          data: void 0,\n          called: true,\n          client: client\n        };\n\n        if (!equal(ref.current.result, result_2)) {\n          setResult(ref.current.result = result_2);\n        }\n      }\n\n      var onError = executeOptions.onError || ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError);\n\n      if (onError) {\n        onError(error, clientOptions); // TODO(brian): why are we returning this here???\n\n        return {\n          data: void 0,\n          errors: error\n        };\n      }\n\n      throw error;\n    });\n  }, []);\n  var reset = React.useCallback(function () {\n    if (ref.current.isMounted) {\n      var result_3 = {\n        called: false,\n        loading: false,\n        client: client\n      };\n      Object.assign(ref.current, {\n        mutationId: 0,\n        result: result_3\n      });\n      setResult(result_3);\n    }\n  }, []);\n  React.useEffect(function () {\n    ref.current.isMounted = true;\n    return function () {\n      ref.current.isMounted = false;\n    };\n  }, []);\n  return [execute, __assign({\n    reset: reset\n  }, result)];\n}","map":{"version":3,"sources":["../../../src/react/hooks/useMutation.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport type {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport type {\n  ApolloCache,\n  DefaultContext,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>,\n    TContext,\n    TCache\n  >\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = React.useState<Omit<MutationResult, \"reset\">>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = React.useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = React.useCallback(\n    (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {}\n    ) => {\n      const { options, mutation } = ref.current;\n      const baseOptions = { ...options, mutation };\n      const client = executeOptions.client || ref.current.client;\n\n      if (\n        !ref.current.result.loading &&\n        !baseOptions.ignoreResults &&\n        ref.current.isMounted\n      ) {\n        setResult(\n          (ref.current.result = {\n            loading: true,\n            error: void 0,\n            data: void 0,\n            called: true,\n            client,\n          })\n        );\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(baseOptions, executeOptions);\n\n      return client\n        .mutate(clientOptions as MutationOptions<TData, OperationVariables>)\n        .then((response) => {\n          const { data, errors } = response;\n          const error =\n            errors && errors.length > 0 ?\n              new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (error && onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          if (\n            mutationId === ref.current.mutationId &&\n            !clientOptions.ignoreResults\n          ) {\n            const result = {\n              called: true,\n              loading: false,\n              data,\n              error,\n              client,\n            };\n\n            if (ref.current.isMounted && !equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onCompleted =\n            executeOptions.onCompleted || ref.current.options?.onCompleted;\n\n          if (!error) {\n            onCompleted?.(\n              response.data!,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n          }\n\n          return response;\n        })\n        .catch((error) => {\n          if (mutationId === ref.current.mutationId && ref.current.isMounted) {\n            const result = {\n              loading: false,\n              error,\n              data: void 0,\n              called: true,\n              client,\n            };\n\n            if (!equal(ref.current.result, result)) {\n              setResult((ref.current.result = result));\n            }\n          }\n\n          const onError =\n            executeOptions.onError || ref.current.options?.onError;\n\n          if (onError) {\n            onError(\n              error,\n              clientOptions as MutationOptions<TData, OperationVariables>\n            );\n\n            // TODO(brian): why are we returning this here???\n            return { data: void 0, errors: error };\n          }\n\n          throw error;\n        });\n    },\n    []\n  );\n\n  const reset = React.useCallback(() => {\n    if (ref.current.isMounted) {\n      const result = { called: false, loading: false, client };\n      Object.assign(ref.current, { mutationId: 0, result });\n      setResult(result);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}