{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"react\";\nimport { getApolloContext } from \"./ApolloContext.js\";\nexport var ApolloProvider = function (_a) {\n  var client = _a.client,\n      children = _a.children;\n  var ApolloContext = getApolloContext();\n  var parentContext = React.useContext(ApolloContext);\n  var context = React.useMemo(function () {\n    return __assign(__assign({}, parentContext), {\n      client: client || parentContext.client\n    });\n  }, [parentContext, client]);\n  invariant(context.client, 46);\n  return React.createElement(ApolloContext.Provider, {\n    value: context\n  }, children);\n};","map":{"version":3,"sources":["../../../src/react/context/ApolloProvider.tsx"],"names":[],"mappings":";AAAA,SAAS,SAAT,QAA0B,kCAA1B;AAEA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAGA,SAAS,gBAAT,QAAiC,oBAAjC;AAOA,OAAO,IAAM,cAAc,GAAuC,UAAC,EAAD,EAGjE;MAFC,MAAM,GAAA,EAAA,CAAA,M;MACN,QAAQ,GAAA,EAAA,CAAA,Q;AAER,MAAM,aAAa,GAAG,gBAAgB,EAAtC;AACA,MAAM,aAAa,GAAG,KAAK,CAAC,UAAN,CAAiB,aAAjB,CAAtB;AAEA,MAAM,OAAO,GAAG,KAAK,CAAC,OAAN,CAAc,YAAA;AAC5B,WAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACK,aADL,CAAA,EACkB;AAChB,MAAA,MAAM,EAAE,MAAM,IAAI,aAAa,CAAC;AADhB,KADlB,CAAA;AAID,GALe,EAKb,CAAC,aAAD,EAAgB,MAAhB,CALa,CAAhB;AAOA,EAAA,SAAS,CACP,OAAO,CAAC,MADD,EAEP,EAFO,CAAT;AAGI,SAAA,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,QAAA,EAAA;AAAA,IAAA,KACF,EAAA;AADE,GAAA,EACF,QADE,CAAA;AAGJ,CApBK","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"react\";\n\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"./ApolloContext.js\";\n\nexport interface ApolloProviderProps<TCache> {\n  client: ApolloClient<TCache>;\n  children: React.ReactNode | React.ReactNode[] | null;\n}\n\nexport const ApolloProvider: React.FC<ApolloProviderProps<any>> = ({\n  client,\n  children,\n}) => {\n  const ApolloContext = getApolloContext();\n  const parentContext = React.useContext(ApolloContext);\n\n  const context = React.useMemo(() => {\n    return {\n      ...parentContext,\n      client: client || parentContext.client,\n    };\n  }, [parentContext, client]);\n\n  invariant(\n    context.client,\n    \"ApolloProvider was not passed a client instance. Make \" +\n      'sure you pass in your client via the \"client\" prop.'\n  );\n\n  return (\n    <ApolloContext.Provider value={context}>{children}</ApolloContext.Provider>\n  );\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}