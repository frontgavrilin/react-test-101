{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { getFragmentDefinitions } from \"../../utilities/index.js\"; // As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\n\nexport function createFragmentRegistry() {\n  var fragments = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fragments[_i] = arguments[_i];\n  }\n\n  return new (FragmentRegistry.bind.apply(FragmentRegistry, __spreadArray([void 0], fragments, false)))();\n}\n\nvar FragmentRegistry =\n/** @class */\nfunction () {\n  // Call `createFragmentRegistry` instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  function FragmentRegistry() {\n    var fragments = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fragments[_i] = arguments[_i];\n    }\n\n    this.registry = Object.create(null);\n    this.resetCaches();\n\n    if (fragments.length) {\n      this.register.apply(this, fragments);\n    }\n  }\n\n  FragmentRegistry.prototype.register = function () {\n    var _this = this;\n\n    var fragments = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fragments[_i] = arguments[_i];\n    }\n\n    var definitions = new Map();\n    fragments.forEach(function (doc) {\n      getFragmentDefinitions(doc).forEach(function (node) {\n        definitions.set(node.name.value, node);\n      });\n    });\n    definitions.forEach(function (node, name) {\n      if (node !== _this.registry[name]) {\n        _this.registry[name] = node;\n\n        _this.invalidate(name);\n      }\n    });\n    return this;\n  }; // Overridden in the resetCaches method below.\n\n\n  FragmentRegistry.prototype.invalidate = function (name) {};\n\n  FragmentRegistry.prototype.resetCaches = function () {\n    this.invalidate = (this.lookup = this.cacheUnaryMethod(this.lookup)).dirty; // This dirty function is bound to the wrapped lookup method.\n\n    this.transform = this.cacheUnaryMethod(this.transform);\n    this.findFragmentSpreads = this.cacheUnaryMethod(this.findFragmentSpreads);\n  };\n\n  FragmentRegistry.prototype.cacheUnaryMethod = function (originalMethod) {\n    return wrap(originalMethod.bind(this), {\n      makeCacheKey: function (arg) {\n        return arg;\n      }\n    });\n  };\n\n  FragmentRegistry.prototype.lookup = function (fragmentName) {\n    return this.registry[fragmentName] || null;\n  };\n\n  FragmentRegistry.prototype.transform = function (document) {\n    var _this = this;\n\n    var defined = new Map();\n    getFragmentDefinitions(document).forEach(function (def) {\n      defined.set(def.name.value, def);\n    });\n    var unbound = new Set();\n\n    var enqueue = function (spreadName) {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    var enqueueChildSpreads = function (node) {\n      return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n    };\n\n    enqueueChildSpreads(document);\n    var missing = [];\n    var map = Object.create(null); // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n\n    unbound.forEach(function (fragmentName) {\n      var knownFragmentDef = defined.get(fragmentName);\n\n      if (knownFragmentDef) {\n        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n      } else {\n        missing.push(fragmentName);\n\n        var def = _this.lookup(fragmentName);\n\n        if (def) {\n          enqueueChildSpreads(map[fragmentName] = def);\n        }\n      }\n    });\n\n    if (missing.length) {\n      var defsToAppend_1 = [];\n      missing.forEach(function (name) {\n        var def = map[name];\n\n        if (def) {\n          defsToAppend_1.push(def);\n        }\n      });\n\n      if (defsToAppend_1.length) {\n        document = __assign(__assign({}, document), {\n          definitions: document.definitions.concat(defsToAppend_1)\n        });\n      }\n    }\n\n    return document;\n  };\n\n  FragmentRegistry.prototype.findFragmentSpreads = function (root) {\n    var spreads = Object.create(null);\n    visit(root, {\n      FragmentSpread: function (node) {\n        spreads[node.name.value] = node;\n      }\n    });\n    return spreads;\n  };\n\n  return FragmentRegistry;\n}();","map":{"version":3,"sources":["../../../src/cache/inmemory/fragmentRegistry.ts"],"names":[],"mappings":";AAMA,SAAS,KAAT,QAAsB,SAAtB;AAGA,SAAS,IAAT,QAAqB,UAArB;AAGA,SAAS,sBAAT,QAAuC,0BAAvC,C,CAQA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAM,SAAU,sBAAV,GAAgC;AACpC,MAAA,SAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA4B;AAA5B,IAAA,SAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAEA,SAAA,KAAW,gBAAgB,CAAA,IAAhB,CAAgB,KAAhB,CAAA,gBAAA,EAAgB,aAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EAAI,SAAJ,EAAa,KAAb,CAAhB,CAAX,GAAA;AACD;;AAED,IAAA,gBAAA;AAAA;AAAA,YAAA;AAGE;AACA;AACA;AACA,WAAA,gBAAA,GAAA;AAAY,QAAA,SAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA4B;AAA5B,MAAA,SAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AALJ,SAAA,QAAA,GAAwB,MAAM,CAAC,MAAP,CAAc,IAAd,CAAxB;AAMN,SAAK,WAAL;;AACA,QAAI,SAAS,CAAC,MAAd,EAAsB;AACpB,WAAK,QAAL,CAAa,KAAb,CAAA,IAAA,EAAiB,SAAjB;AACD;AACF;;AAEM,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAAgB,QAAA,SAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA4B;AAA5B,MAAA,SAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACd,QAAM,WAAW,GAAG,IAAI,GAAJ,EAApB;AACA,IAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,GAAD,EAAkB;AAClC,MAAA,sBAAsB,CAAC,GAAD,CAAtB,CAA4B,OAA5B,CAAoC,UAAC,IAAD,EAAK;AACvC,QAAA,WAAW,CAAC,GAAZ,CAAgB,IAAI,CAAC,IAAL,CAAU,KAA1B,EAAiC,IAAjC;AACD,OAFD;AAGD,KAJD;AAMA,IAAA,WAAW,CAAC,OAAZ,CAAoB,UAAC,IAAD,EAAO,IAAP,EAAW;AAC7B,UAAI,IAAI,KAAK,KAAI,CAAC,QAAL,CAAc,IAAd,CAAb,EAAkC;AAChC,QAAA,KAAI,CAAC,QAAL,CAAc,IAAd,IAAsB,IAAtB;;AACA,QAAA,KAAI,CAAC,UAAL,CAAgB,IAAhB;AACD;AACF,KALD;AAOA,WAAO,IAAP;AACD,GAhBM,CAbT,CA+BE;;;AACQ,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,IAAnB,EAA+B,CAAI,CAA3B;;AAED,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACE,SAAK,UAAL,GAAkB,CAAC,KAAK,MAAL,GAAc,KAAK,gBAAL,CAAsB,KAAK,MAA3B,CAAf,EAAmD,KAArE,CADF,CAC8E;;AAC5E,SAAK,SAAL,GAAiB,KAAK,gBAAL,CAAsB,KAAK,SAA3B,CAAjB;AACA,SAAK,mBAAL,GAA2B,KAAK,gBAAL,CAAsB,KAAK,mBAA3B,CAA3B;AACD,GAJM;;AAMC,EAAA,gBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,UAAsD,cAAtD,EAAuE;AACrE,WAAO,IAAI,CAA+B,cAAc,CAAC,IAAf,CAAoB,IAApB,CAA/B,EAA0D;AACnE,MAAA,YAAY,EAAE,UAAC,GAAD,EAAI;AAAK,eAAA,GAAA;AAAG;AADyC,KAA1D,CAAX;AAGD,GAJO;;AAMD,EAAA,gBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,YAAd,EAAkC;AAChC,WAAO,KAAK,QAAL,CAAc,YAAd,KAA+B,IAAtC;AACD,GAFM;;AAIA,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAyC,QAAzC,EAAoD;AAApD,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,OAAO,GAAG,IAAI,GAAJ,EAAhB;AACA,IAAA,sBAAsB,CAAC,QAAD,CAAtB,CAAiC,OAAjC,CAAyC,UAAC,GAAD,EAAI;AAC3C,MAAA,OAAO,CAAC,GAAR,CAAY,GAAG,CAAC,IAAJ,CAAS,KAArB,EAA4B,GAA5B;AACD,KAFD;AAIA,QAAM,OAAO,GAAG,IAAI,GAAJ,EAAhB;;AACA,QAAM,OAAO,GAAG,UAAC,UAAD,EAAmB;AACjC,UAAI,CAAC,OAAO,CAAC,GAAR,CAAY,UAAZ,CAAL,EAA8B;AAC5B,QAAA,OAAO,CAAC,GAAR,CAAY,UAAZ;AACD;AACF,KAJD;;AAMA,QAAM,mBAAmB,GAAG,UAAC,IAAD,EAAc;AACxC,aAAA,MAAM,CAAC,IAAP,CAAY,KAAI,CAAC,mBAAL,CAAyB,IAAzB,CAAZ,EAA4C,OAA5C,CAAoD,OAApD,CAAA;AAA4D,KAD9D;;AAGA,IAAA,mBAAmB,CAAC,QAAD,CAAnB;AAEA,QAAM,OAAO,GAAa,EAA1B;AACA,QAAM,GAAG,GAAgB,MAAM,CAAC,MAAP,CAAc,IAAd,CAAzB,CAnBkD,CAqBlD;AACA;;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,UAAC,YAAD,EAAa;AAC3B,UAAM,gBAAgB,GAAG,OAAO,CAAC,GAAR,CAAY,YAAZ,CAAzB;;AACA,UAAI,gBAAJ,EAAsB;AACpB,QAAA,mBAAmB,CAAE,GAAG,CAAC,YAAD,CAAH,GAAoB,gBAAtB,CAAnB;AACD,OAFD,MAEO;AACL,QAAA,OAAO,CAAC,IAAR,CAAa,YAAb;;AACA,YAAM,GAAG,GAAG,KAAI,CAAC,MAAL,CAAY,YAAZ,CAAZ;;AACA,YAAI,GAAJ,EAAS;AACP,UAAA,mBAAmB,CAAE,GAAG,CAAC,YAAD,CAAH,GAAoB,GAAtB,CAAnB;AACD;AACF;AACF,KAXD;;AAaA,QAAI,OAAO,CAAC,MAAZ,EAAoB;AAClB,UAAM,cAAY,GAA6B,EAA/C;AACA,MAAA,OAAO,CAAC,OAAR,CAAgB,UAAC,IAAD,EAAK;AACnB,YAAM,GAAG,GAAG,GAAG,CAAC,IAAD,CAAf;;AACA,YAAI,GAAJ,EAAS;AACP,UAAA,cAAY,CAAC,IAAb,CAAkB,GAAlB;AACD;AACF,OALD;;AAOA,UAAI,cAAY,CAAC,MAAjB,EAAyB;AACvB,QAAA,QAAQ,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACH,QADG,CAAA,EACK;AACX,UAAA,WAAW,EAAE,QAAQ,CAAC,WAAT,CAAqB,MAArB,CAA4B,cAA5B;AADF,SADL,CAAR;AAID;AACF;;AAED,WAAO,QAAP;AACD,GAtDM;;AAwDA,EAAA,gBAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,IAA3B,EAAwC;AACtC,QAAM,OAAO,GAAsB,MAAM,CAAC,MAAP,CAAc,IAAd,CAAnC;AAEA,IAAA,KAAK,CAAC,IAAD,EAAO;AACV,MAAA,cAAc,EAAA,UAAC,IAAD,EAAK;AACjB,QAAA,OAAO,CAAC,IAAI,CAAC,IAAL,CAAU,KAAX,CAAP,GAA2B,IAA3B;AACD;AAHS,KAAP,CAAL;AAMA,WAAO,OAAP;AACD,GAVM;;AAWT,SAAA,gBAAA;AAAC,CArHD,EAAA","sourcesContent":["import type {\n  DocumentNode,\n  ASTNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n} from \"graphql\";\nimport { visit } from \"graphql\";\n\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\n\nimport type { FragmentMap } from \"../../utilities/index.js\";\nimport { getFragmentDefinitions } from \"../../utilities/index.js\";\n\nexport interface FragmentRegistryAPI {\n  register(...fragments: DocumentNode[]): this;\n  lookup(fragmentName: string): FragmentDefinitionNode | null;\n  transform<D extends DocumentNode>(document: D): D;\n}\n\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry(\n  ...fragments: DocumentNode[]\n): FragmentRegistryAPI {\n  return new FragmentRegistry(...fragments);\n}\n\nclass FragmentRegistry implements FragmentRegistryAPI {\n  private registry: FragmentMap = Object.create(null);\n\n  // Call `createFragmentRegistry` instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  constructor(...fragments: DocumentNode[]) {\n    this.resetCaches();\n    if (fragments.length) {\n      this.register(...fragments);\n    }\n  }\n\n  public register(...fragments: DocumentNode[]): this {\n    const definitions = new Map<string, FragmentDefinitionNode>();\n    fragments.forEach((doc: DocumentNode) => {\n      getFragmentDefinitions(doc).forEach((node) => {\n        definitions.set(node.name.value, node);\n      });\n    });\n\n    definitions.forEach((node, name) => {\n      if (node !== this.registry[name]) {\n        this.registry[name] = node;\n        this.invalidate(name);\n      }\n    });\n\n    return this;\n  }\n\n  // Overridden in the resetCaches method below.\n  private invalidate(name: string) {}\n\n  public resetCaches() {\n    this.invalidate = (this.lookup = this.cacheUnaryMethod(this.lookup)).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = this.cacheUnaryMethod(this.transform);\n    this.findFragmentSpreads = this.cacheUnaryMethod(this.findFragmentSpreads);\n  }\n\n  private cacheUnaryMethod<F extends (arg: any) => any>(originalMethod: F) {\n    return wrap<Parameters<F>, ReturnType<F>>(originalMethod.bind(this), {\n      makeCacheKey: (arg) => arg,\n    }) as OptimisticWrapperFunction<Parameters<F>, ReturnType<F>> & F;\n  }\n\n  public lookup(fragmentName: string): FragmentDefinitionNode | null {\n    return this.registry[fragmentName] || null;\n  }\n\n  public transform<D extends DocumentNode>(document: D): D {\n    const defined = new Map<string, FragmentDefinitionNode>();\n    getFragmentDefinitions(document).forEach((def) => {\n      defined.set(def.name.value, def);\n    });\n\n    const unbound = new Set<string>();\n    const enqueue = (spreadName: string) => {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    const enqueueChildSpreads = (node: ASTNode) =>\n      Object.keys(this.findFragmentSpreads(node)).forEach(enqueue);\n\n    enqueueChildSpreads(document);\n\n    const missing: string[] = [];\n    const map: FragmentMap = Object.create(null);\n\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach((fragmentName) => {\n      const knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads((map[fragmentName] = knownFragmentDef));\n      } else {\n        missing.push(fragmentName);\n        const def = this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads((map[fragmentName] = def));\n        }\n      }\n    });\n\n    if (missing.length) {\n      const defsToAppend: FragmentDefinitionNode[] = [];\n      missing.forEach((name) => {\n        const def = map[name];\n        if (def) {\n          defsToAppend.push(def);\n        }\n      });\n\n      if (defsToAppend.length) {\n        document = {\n          ...document,\n          definitions: document.definitions.concat(defsToAppend),\n        };\n      }\n    }\n\n    return document;\n  }\n\n  public findFragmentSpreads(root: ASTNode): FragmentSpreadMap {\n    const spreads: FragmentSpreadMap = Object.create(null);\n\n    visit(root, {\n      FragmentSpread(node) {\n        spreads[node.name.value] = node;\n      },\n    });\n\n    return spreads;\n  }\n}\n\ninterface FragmentSpreadMap {\n  [fragmentSpreadName: string]: FragmentSpreadNode;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}