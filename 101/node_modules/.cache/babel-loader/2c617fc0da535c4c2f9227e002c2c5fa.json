{"ast":null,"code":"import { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport * as React from \"react\"; // Prevent webpack from complaining about our feature detection of the\n// use property of the React namespace, which is expected not\n// to exist when using current stable versions, and that's fine.\n\nvar useKey = \"use\";\nvar realHook = React[useKey]; // This is named with two underscores to allow this hook to evade typical rules of\n// hooks (i.e. it can be used conditionally)\n\nexport var __use = realHook || function __use(promise) {\n  var statefulPromise = wrapPromiseWithState(promise);\n\n  switch (statefulPromise.status) {\n    case \"pending\":\n      throw statefulPromise;\n\n    case \"rejected\":\n      throw statefulPromise.reason;\n\n    case \"fulfilled\":\n      return statefulPromise.value;\n  }\n};","map":{"version":3,"sources":["../../../../src/react/hooks/internal/__use.ts"],"names":[],"mappings":"AAAA,SAAS,oBAAT,QAAqC,6BAArC;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB,C,CAGA;AACA;AACA;;AACA,IAAM,MAAM,GAAG,KAAf;AACA,IAAM,QAAQ,GAAG,KAAK,CAAC,MAAD,CAAtB,C,CAEA;AACA;;AACA,OAAO,IAAM,KAAK,GAChB,QAAQ,IACR,SAAS,KAAT,CAAuB,OAAvB,EAA+C;AAC7C,MAAM,eAAe,GAAG,oBAAoB,CAAC,OAAD,CAA5C;;AAEA,UAAQ,eAAe,CAAC,MAAxB;AACE,SAAK,SAAL;AACE,YAAM,eAAN;;AACF,SAAK,UAAL;AACE,YAAM,eAAe,CAAC,MAAtB;;AACF,SAAK,WAAL;AACE,aAAO,eAAe,CAAC,KAAvB;AANJ;AAQD,CAbI","sourcesContent":["import { wrapPromiseWithState } from \"../../../utilities/index.js\";\nimport * as React from \"react\";\n\ntype Use = <T>(promise: Promise<T>) => T;\n// Prevent webpack from complaining about our feature detection of the\n// use property of the React namespace, which is expected not\n// to exist when using current stable versions, and that's fine.\nconst useKey = \"use\" as keyof typeof React;\nconst realHook = React[useKey] as Use | undefined;\n\n// This is named with two underscores to allow this hook to evade typical rules of\n// hooks (i.e. it can be used conditionally)\nexport const __use =\n  realHook ||\n  function __use<TValue>(promise: Promise<TValue>) {\n    const statefulPromise = wrapPromiseWithState(promise);\n\n    switch (statefulPromise.status) {\n      case \"pending\":\n        throw statefulPromise;\n      case \"rejected\":\n        throw statefulPromise.reason;\n      case \"fulfilled\":\n        return statefulPromise.value;\n    }\n  };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}