{"ast":null,"code":"function defaultDispose() {}\n\nexport class StrongCache {\n  constructor(max = Infinity, dispose = defaultDispose) {\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n\n  has(key) {\n    return this.map.has(key);\n  }\n\n  get(key) {\n    const node = this.getNode(key);\n    return node && node.value;\n  }\n\n  get size() {\n    return this.map.size;\n  }\n\n  getNode(key) {\n    const node = this.map.get(key);\n\n    if (node && node !== this.newest) {\n      const {\n        older,\n        newer\n      } = node;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      node.older = this.newest;\n      node.older.newer = node;\n      node.newer = null;\n      this.newest = node;\n\n      if (node === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return node;\n  }\n\n  set(key, value) {\n    let node = this.getNode(key);\n\n    if (node) {\n      return node.value = value;\n    }\n\n    node = {\n      key,\n      value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = node;\n    }\n\n    this.newest = node;\n    this.oldest = this.oldest || node;\n    this.map.set(key, node);\n    return node.value;\n  }\n\n  clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  delete(key) {\n    const node = this.map.get(key);\n\n    if (node) {\n      if (node === this.newest) {\n        this.newest = node.older;\n      }\n\n      if (node === this.oldest) {\n        this.oldest = node.newer;\n      }\n\n      if (node.newer) {\n        node.newer.older = node.older;\n      }\n\n      if (node.older) {\n        node.older.newer = node.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(node.value, key);\n      return true;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["../src/strong.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["function defaultDispose() { }\nexport class StrongCache {\n    constructor(max = Infinity, dispose = defaultDispose) {\n        this.max = max;\n        this.dispose = dispose;\n        this.map = new Map();\n        this.newest = null;\n        this.oldest = null;\n    }\n    has(key) {\n        return this.map.has(key);\n    }\n    get(key) {\n        const node = this.getNode(key);\n        return node && node.value;\n    }\n    get size() {\n        return this.map.size;\n    }\n    getNode(key) {\n        const node = this.map.get(key);\n        if (node && node !== this.newest) {\n            const { older, newer } = node;\n            if (newer) {\n                newer.older = older;\n            }\n            if (older) {\n                older.newer = newer;\n            }\n            node.older = this.newest;\n            node.older.newer = node;\n            node.newer = null;\n            this.newest = node;\n            if (node === this.oldest) {\n                this.oldest = newer;\n            }\n        }\n        return node;\n    }\n    set(key, value) {\n        let node = this.getNode(key);\n        if (node) {\n            return node.value = value;\n        }\n        node = {\n            key,\n            value,\n            newer: null,\n            older: this.newest\n        };\n        if (this.newest) {\n            this.newest.newer = node;\n        }\n        this.newest = node;\n        this.oldest = this.oldest || node;\n        this.map.set(key, node);\n        return node.value;\n    }\n    clean() {\n        while (this.oldest && this.map.size > this.max) {\n            this.delete(this.oldest.key);\n        }\n    }\n    delete(key) {\n        const node = this.map.get(key);\n        if (node) {\n            if (node === this.newest) {\n                this.newest = node.older;\n            }\n            if (node === this.oldest) {\n                this.oldest = node.newer;\n            }\n            if (node.newer) {\n                node.newer.older = node.older;\n            }\n            if (node.older) {\n                node.older.newer = node.newer;\n            }\n            this.map.delete(key);\n            this.dispose(node.value, key);\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=strong.js.map"]},"metadata":{},"sourceType":"module"}