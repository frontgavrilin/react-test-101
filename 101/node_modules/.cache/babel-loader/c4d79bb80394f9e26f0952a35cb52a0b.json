{"ast":null,"code":"import { Observable } from \"zen-observable-ts\"; // This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\n\nimport \"symbol-observable\"; // The zen-observable package defines Observable.prototype[Symbol.observable]\n// when Symbol is supported, but RxJS interop depends on also setting this fake\n// '@@observable' string as a polyfill for Symbol.observable.\n\nvar prototype = Observable.prototype;\nvar fakeObsSymbol = \"@@observable\";\n\nif (!prototype[fakeObsSymbol]) {\n  // @ts-expect-error\n  prototype[fakeObsSymbol] = function () {\n    return this;\n  };\n}\n\nexport { Observable };","map":{"version":3,"sources":["../../../src/utilities/observables/Observable.ts"],"names":[],"mappings":"AAKA,SAAS,UAAT,QAA2B,mBAA3B,C,CAEA;AACA;;AACA,OAAO,mBAAP,C,CAIA;AACA;AACA;;AACQ,IAAA,SAAS,GAAK,UAAU,CAAf,SAAT;AACR,IAAM,aAAa,GAAG,cAAtB;;AACA,IAAI,CAAC,SAAS,CAAC,aAAD,CAAd,EAA+B;AAC7B;AACA,EAAA,SAAS,CAAC,aAAD,CAAT,GAA2B,YAAA;AACzB,WAAO,IAAP;AACD,GAFD;AAGD;;AAED,SAAS,UAAT","sourcesContent":["import type {\n  Observer,\n  Subscription as ObservableSubscription,\n  Subscriber,\n} from \"zen-observable-ts\";\nimport { Observable } from \"zen-observable-ts\";\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport \"symbol-observable\";\n\nexport type { Observer, ObservableSubscription, Subscriber };\n\n// The zen-observable package defines Observable.prototype[Symbol.observable]\n// when Symbol is supported, but RxJS interop depends on also setting this fake\n// '@@observable' string as a polyfill for Symbol.observable.\nconst { prototype } = Observable;\nconst fakeObsSymbol = \"@@observable\" as keyof typeof prototype;\nif (!prototype[fakeObsSymbol]) {\n  // @ts-expect-error\n  prototype[fakeObsSymbol] = function () {\n    return this;\n  };\n}\n\nexport { Observable };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}