{"ast":null,"code":"import { parentEntrySlot } from \"./context.js\";\nimport { maybeUnsubscribe, arrayFromSet } from \"./helpers.js\";\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100; // Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\n\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\nfunction valueIs(a, b) {\n  const len = a.length;\n  return (// Unknown values are not equal to each other.\n    len > 0 && // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length && // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n\n    case 1:\n      return value[0];\n\n    case 2:\n      throw value[1];\n  }\n}\n\nfunction valueCopy(value) {\n  return value.slice(0);\n}\n\nexport class Entry {\n  constructor(fn) {\n    this.fn = fn;\n    this.parents = new Set();\n    this.childValues = new Map(); // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    this.deps = null;\n    ++Entry.count;\n  }\n\n  peek() {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      rememberParent(this);\n      return this.value[0];\n    }\n  } // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n\n\n  recompute(args) {\n    assert(!this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);\n  }\n\n  setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    reportDirty(this); // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n\n    maybeUnsubscribe(this);\n  }\n\n  dispose() {\n    this.setDirty(); // Sever any dependency relationships with our own children, so those\n    // children don't retain this parent Entry in their child.parents sets,\n    // thereby preventing it from being fully garbage collected.\n\n    forgetChildren(this); // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n\n    eachParent(this, (parent, child) => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  forget() {\n    // The code that creates Entry objects in index.ts will replace this method\n    // with one that actually removes the Entry from the cache, which will also\n    // trigger the entry.dispose method.\n    this.dispose();\n  }\n\n  dependOn(dep) {\n    dep.add(this);\n\n    if (!this.deps) {\n      this.deps = emptySetPool.pop() || new Set();\n    }\n\n    this.deps.add(dep);\n  }\n\n  forgetDeps() {\n    if (this.deps) {\n      arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n\n}\nEntry.count = 0;\n\nfunction rememberParent(child) {\n  const parent = parentEntrySlot.getValue();\n\n  if (parent) {\n    child.parents.add(parent);\n\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry, args) {\n  forgetChildren(entry); // Set entry as the parent entry while calling recomputeNewValue(entry).\n\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n\n  if (maybeSubscribe(entry, args)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry, args) {\n  entry.recomputing = true;\n  const {\n    normalizeResult\n  } = entry;\n  let oldValueCopy;\n\n  if (normalizeResult && entry.value.length === 1) {\n    oldValueCopy = valueCopy(entry.value);\n  } // Make entry.value an empty array, representing an unknown value.\n\n\n  entry.value.length = 0;\n\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, args); // If we have a viable oldValueCopy to compare with the (successfully\n    // recomputed) new entry.value, and they are not already === identical, give\n    // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n    // and/or entry.value[0] to determine the final cached entry.value.\n\n    if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n      try {\n        entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n      } catch (_a) {// If normalizeResult throws, just use the newer value, rather than\n        // saving the exception as entry.value[1].\n      }\n    }\n  } catch (e) {\n    // If entry.fn throws, entry.value will hold that exception.\n    entry.value[1] = e;\n  } // Either way, this line is always reached.\n\n\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child) {\n  eachParent(child, reportDirtyChild);\n}\n\nfunction reportClean(child) {\n  eachParent(child, reportCleanChild);\n}\n\nfunction eachParent(child, callback) {\n  const parentCount = child.parents.size;\n\n  if (parentCount) {\n    const parents = arrayFromSet(child.parents);\n\n    for (let i = 0; i < parentCount; ++i) {\n      callback(parents[i], child);\n    }\n  }\n} // Let a parent Entry know that one of its children may be dirty.\n\n\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  const parentWasClean = !mightBeDirty(parent);\n\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child); // If parent was clean before, it just became (possibly) dirty (according to\n  // mightBeDirty), since we just added child to parent.dirtyChildren.\n\n  if (parentWasClean) {\n    reportDirty(parent);\n  }\n} // Let a parent Entry know that one of its children is no longer dirty.\n\n\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  const childValue = parent.childValues.get(child);\n\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent, child) {\n  const dc = parent.dirtyChildren;\n\n  if (dc) {\n    dc.delete(child);\n\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n\n      parent.dirtyChildren = null;\n    }\n  }\n} // Removes all children from this entry and returns an array of the\n// removed children.\n\n\nfunction forgetChildren(parent) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  } // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n\n\n  parent.forgetDeps(); // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry, args) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n\n      entry.unsubscribe = entry.subscribe.apply(null, args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  } // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n\n\n  return true;\n}","map":{"version":3,"sources":["../src/entry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { parentEntrySlot } from \"./context.js\";\nimport { maybeUnsubscribe, arrayFromSet } from \"./helpers.js\";\nconst emptySetPool = [];\nconst POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n    if (!condition) {\n        throw new Error(optionalMessage || \"assertion failure\");\n    }\n}\nfunction valueIs(a, b) {\n    const len = a.length;\n    return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n        // Both values must be ordinary (or both exceptional) to be equal.\n        len === b.length &&\n        // The underlying value or exception must be the same.\n        a[len - 1] === b[len - 1]);\n}\nfunction valueGet(value) {\n    switch (value.length) {\n        case 0: throw new Error(\"unknown value\");\n        case 1: return value[0];\n        case 2: throw value[1];\n    }\n}\nfunction valueCopy(value) {\n    return value.slice(0);\n}\nexport class Entry {\n    constructor(fn) {\n        this.fn = fn;\n        this.parents = new Set();\n        this.childValues = new Map();\n        // When this Entry has children that are dirty, this property becomes\n        // a Set containing other Entry objects, borrowed from emptySetPool.\n        // When the set becomes empty, it gets recycled back to emptySetPool.\n        this.dirtyChildren = null;\n        this.dirty = true;\n        this.recomputing = false;\n        this.value = [];\n        this.deps = null;\n        ++Entry.count;\n    }\n    peek() {\n        if (this.value.length === 1 && !mightBeDirty(this)) {\n            rememberParent(this);\n            return this.value[0];\n        }\n    }\n    // This is the most important method of the Entry API, because it\n    // determines whether the cached this.value can be returned immediately,\n    // or must be recomputed. The overall performance of the caching system\n    // depends on the truth of the following observations: (1) this.dirty is\n    // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n    // (3) valueGet(this.value) is usually returned without recomputation.\n    recompute(args) {\n        assert(!this.recomputing, \"already recomputing\");\n        rememberParent(this);\n        return mightBeDirty(this)\n            ? reallyRecompute(this, args)\n            : valueGet(this.value);\n    }\n    setDirty() {\n        if (this.dirty)\n            return;\n        this.dirty = true;\n        reportDirty(this);\n        // We can go ahead and unsubscribe here, since any further dirty\n        // notifications we receive will be redundant, and unsubscribing may\n        // free up some resources, e.g. file watchers.\n        maybeUnsubscribe(this);\n    }\n    dispose() {\n        this.setDirty();\n        // Sever any dependency relationships with our own children, so those\n        // children don't retain this parent Entry in their child.parents sets,\n        // thereby preventing it from being fully garbage collected.\n        forgetChildren(this);\n        // Because this entry has been kicked out of the cache (in index.js),\n        // we've lost the ability to find out if/when this entry becomes dirty,\n        // whether that happens through a subscription, because of a direct call\n        // to entry.setDirty(), or because one of its children becomes dirty.\n        // Because of this loss of future information, we have to assume the\n        // worst (that this entry might have become dirty very soon), so we must\n        // immediately mark this entry's parents as dirty. Normally we could\n        // just call entry.setDirty() rather than calling parent.setDirty() for\n        // each parent, but that would leave this entry in parent.childValues\n        // and parent.dirtyChildren, which would prevent the child from being\n        // truly forgotten.\n        eachParent(this, (parent, child) => {\n            parent.setDirty();\n            forgetChild(parent, this);\n        });\n    }\n    forget() {\n        // The code that creates Entry objects in index.ts will replace this method\n        // with one that actually removes the Entry from the cache, which will also\n        // trigger the entry.dispose method.\n        this.dispose();\n    }\n    dependOn(dep) {\n        dep.add(this);\n        if (!this.deps) {\n            this.deps = emptySetPool.pop() || new Set();\n        }\n        this.deps.add(dep);\n    }\n    forgetDeps() {\n        if (this.deps) {\n            arrayFromSet(this.deps).forEach(dep => dep.delete(this));\n            this.deps.clear();\n            emptySetPool.push(this.deps);\n            this.deps = null;\n        }\n    }\n}\nEntry.count = 0;\nfunction rememberParent(child) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n        child.parents.add(parent);\n        if (!parent.childValues.has(child)) {\n            parent.childValues.set(child, []);\n        }\n        if (mightBeDirty(child)) {\n            reportDirtyChild(parent, child);\n        }\n        else {\n            reportCleanChild(parent, child);\n        }\n        return parent;\n    }\n}\nfunction reallyRecompute(entry, args) {\n    forgetChildren(entry);\n    // Set entry as the parent entry while calling recomputeNewValue(entry).\n    parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);\n    if (maybeSubscribe(entry, args)) {\n        // If we successfully recomputed entry.value and did not fail to\n        // (re)subscribe, then this Entry is no longer explicitly dirty.\n        setClean(entry);\n    }\n    return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry, args) {\n    entry.recomputing = true;\n    const { normalizeResult } = entry;\n    let oldValueCopy;\n    if (normalizeResult && entry.value.length === 1) {\n        oldValueCopy = valueCopy(entry.value);\n    }\n    // Make entry.value an empty array, representing an unknown value.\n    entry.value.length = 0;\n    try {\n        // If entry.fn succeeds, entry.value will become a normal Value.\n        entry.value[0] = entry.fn.apply(null, args);\n        // If we have a viable oldValueCopy to compare with the (successfully\n        // recomputed) new entry.value, and they are not already === identical, give\n        // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]\n        // and/or entry.value[0] to determine the final cached entry.value.\n        if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {\n            try {\n                entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);\n            }\n            catch (_a) {\n                // If normalizeResult throws, just use the newer value, rather than\n                // saving the exception as entry.value[1].\n            }\n        }\n    }\n    catch (e) {\n        // If entry.fn throws, entry.value will hold that exception.\n        entry.value[1] = e;\n    }\n    // Either way, this line is always reached.\n    entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n    entry.dirty = false;\n    if (mightBeDirty(entry)) {\n        // This Entry may still have dirty children, in which case we can't\n        // let our parents know we're clean just yet.\n        return;\n    }\n    reportClean(entry);\n}\nfunction reportDirty(child) {\n    eachParent(child, reportDirtyChild);\n}\nfunction reportClean(child) {\n    eachParent(child, reportCleanChild);\n}\nfunction eachParent(child, callback) {\n    const parentCount = child.parents.size;\n    if (parentCount) {\n        const parents = arrayFromSet(child.parents);\n        for (let i = 0; i < parentCount; ++i) {\n            callback(parents[i], child);\n        }\n    }\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n    // Must have called rememberParent(child) before calling\n    // reportDirtyChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(mightBeDirty(child));\n    const parentWasClean = !mightBeDirty(parent);\n    if (!parent.dirtyChildren) {\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\n    }\n    else if (parent.dirtyChildren.has(child)) {\n        // If we already know this child is dirty, then we must have already\n        // informed our own parents that we are dirty, so we can terminate\n        // the recursion early.\n        return;\n    }\n    parent.dirtyChildren.add(child);\n    // If parent was clean before, it just became (possibly) dirty (according to\n    // mightBeDirty), since we just added child to parent.dirtyChildren.\n    if (parentWasClean) {\n        reportDirty(parent);\n    }\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n    // Must have called rememberChild(child) before calling\n    // reportCleanChild(parent, child).\n    assert(parent.childValues.has(child));\n    assert(!mightBeDirty(child));\n    const childValue = parent.childValues.get(child);\n    if (childValue.length === 0) {\n        parent.childValues.set(child, valueCopy(child.value));\n    }\n    else if (!valueIs(childValue, child.value)) {\n        parent.setDirty();\n    }\n    removeDirtyChild(parent, child);\n    if (mightBeDirty(parent)) {\n        return;\n    }\n    reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n    const dc = parent.dirtyChildren;\n    if (dc) {\n        dc.delete(child);\n        if (dc.size === 0) {\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\n                emptySetPool.push(dc);\n            }\n            parent.dirtyChildren = null;\n        }\n    }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n    if (parent.childValues.size > 0) {\n        parent.childValues.forEach((_value, child) => {\n            forgetChild(parent, child);\n        });\n    }\n    // Remove this parent Entry from any sets to which it was added by the\n    // addToSet method.\n    parent.forgetDeps();\n    // After we forget all our children, this.dirtyChildren must be empty\n    // and therefore must have been reset to null.\n    assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n    child.parents.delete(parent);\n    parent.childValues.delete(child);\n    removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry, args) {\n    if (typeof entry.subscribe === \"function\") {\n        try {\n            maybeUnsubscribe(entry); // Prevent double subscriptions.\n            entry.unsubscribe = entry.subscribe.apply(null, args);\n        }\n        catch (e) {\n            // If this Entry has a subscribe function and it threw an exception\n            // (or an unsubscribe function it previously returned now throws),\n            // return false to indicate that we were not able to subscribe (or\n            // unsubscribe), and this Entry should remain dirty.\n            entry.setDirty();\n            return false;\n        }\n    }\n    // Returning true indicates either that there was no entry.subscribe\n    // function or that it succeeded.\n    return true;\n}\n//# sourceMappingURL=entry.js.map"]},"metadata":{},"sourceType":"module"}