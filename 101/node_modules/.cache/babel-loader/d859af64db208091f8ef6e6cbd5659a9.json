{"ast":null,"code":"import { Trie } from \"@wry/trie\";\nimport { canUseWeakMap } from \"../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\n\nvar SuspenseCache =\n/** @class */\nfunction () {\n  function SuspenseCache(options) {\n    if (options === void 0) {\n      options = Object.create(null);\n    }\n\n    this.queryRefs = new Trie(canUseWeakMap);\n    this.options = options;\n  }\n\n  SuspenseCache.prototype.getQueryRef = function (cacheKey, createObservable) {\n    var ref = this.queryRefs.lookupArray(cacheKey);\n\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        key: cacheKey,\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: function () {\n          delete ref.current;\n        }\n      });\n    }\n\n    return ref.current;\n  };\n\n  return SuspenseCache;\n}();\n\nexport { SuspenseCache };","map":{"version":3,"sources":["../../../src/react/cache/SuspenseCache.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,QAAqB,WAArB;AAEA,SAAS,aAAT,QAA8B,0BAA9B;AACA,SAAS,sBAAT,QAAuC,qBAAvC;;AAiBA,IAAA,aAAA;AAAA;AAAA,YAAA;AAME,WAAA,aAAA,CAAY,OAAZ,EAA+D;AAAnD,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAgC,MAAM,CAAC,MAAP,CAAc,IAAd,CAAhC;AAAmD;;AALvD,SAAA,SAAA,GAAY,IAAI,IAAJ,CAClB,aADkB,CAAZ;AAMN,SAAK,OAAL,GAAe,OAAf;AACD;;AAED,EAAA,aAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UACE,QADF,EAEE,gBAFF,EAEgD;AAE9C,QAAM,GAAG,GAAG,KAAK,SAAL,CAAe,WAAf,CAA2B,QAA3B,CAAZ;;AAIA,QAAI,CAAC,GAAG,CAAC,OAAT,EAAkB;AAChB,MAAA,GAAG,CAAC,OAAJ,GAAc,IAAI,sBAAJ,CAA2B,gBAAgB,EAA3C,EAA+C;AAC3D,QAAA,GAAG,EAAE,QADsD;AAE3D,QAAA,oBAAoB,EAAE,KAAK,OAAL,CAAa,oBAFwB;AAG3D,QAAA,SAAS,EAAE,YAAA;AACT,iBAAO,GAAG,CAAC,OAAX;AACD;AAL0D,OAA/C,CAAd;AAOD;;AAED,WAAO,GAAG,CAAC,OAAX;AACD,GAnBD;;AAoBF,SAAA,aAAA;AAAC,CA9BD,EAAA","sourcesContent":["import { Trie } from \"@wry/trie\";\nimport type { ObservableQuery } from \"../../core/index.js\";\nimport { canUseWeakMap } from \"../../utilities/index.js\";\nimport { InternalQueryReference } from \"./QueryReference.js\";\nimport type { CacheKey } from \"./types.js\";\n\nexport interface SuspenseCacheOptions {\n  /**\n   * Specifies the amount of time, in milliseconds, the suspense cache will wait\n   * for a suspended component to read from the suspense cache before it\n   * automatically disposes of the query. This prevents memory leaks when a\n   * component unmounts before a suspended resource finishes loading. Increase\n   * the timeout if your queries take longer than than the specified time to\n   * prevent your queries from suspending over and over.\n   *\n   * Defaults to 30 seconds.\n   */\n  autoDisposeTimeoutMs?: number;\n}\n\nexport class SuspenseCache {\n  private queryRefs = new Trie<{ current?: InternalQueryReference }>(\n    canUseWeakMap\n  );\n  private options: SuspenseCacheOptions;\n\n  constructor(options: SuspenseCacheOptions = Object.create(null)) {\n    this.options = options;\n  }\n\n  getQueryRef<TData = any>(\n    cacheKey: CacheKey,\n    createObservable: () => ObservableQuery<TData>\n  ) {\n    const ref = this.queryRefs.lookupArray(cacheKey) as {\n      current?: InternalQueryReference<TData>;\n    };\n\n    if (!ref.current) {\n      ref.current = new InternalQueryReference(createObservable(), {\n        key: cacheKey,\n        autoDisposeTimeoutMs: this.options.autoDisposeTimeoutMs,\n        onDispose: () => {\n          delete ref.current;\n        },\n      });\n    }\n\n    return ref.current;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}