{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var hasIssuedDeprecationWarningRef = React.useRef(false);\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n\n  var _a = React.useState({\n    loading: !(options === null || options === void 0 ? void 0 : options.skip),\n    error: void 0,\n    data: void 0,\n    variables: options === null || options === void 0 ? void 0 : options.variables\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onData ? 52 : 53);\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onComplete ? 54 : 55);\n    }\n  }\n\n  var _b = React.useState(function () {\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options === null || options === void 0 ? void 0 : options.variables,\n      fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n      context: options === null || options === void 0 ? void 0 : options.context\n    });\n  }),\n      observable = _b[0],\n      setObservable = _b[1];\n\n  var canResetObservableRef = React.useRef(false);\n  React.useEffect(function () {\n    return function () {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n  var ref = React.useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  React.useEffect(function () {\n    var _a, _b, _c, _d;\n\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n\n    if (typeof shouldResubscribe === \"function\") {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options, canResetObservableRef.current]);\n  React.useEffect(function () {\n    if (!observable) {\n      return;\n    }\n\n    var subscriptionStopped = false;\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n\n        if (subscriptionStopped) {\n          return;\n        }\n\n        var result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n          ref.current.options.onData({\n            client: client,\n            data: result\n          });\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error: error,\n            variables: options === null || options === void 0 ? void 0 : options.variables\n          });\n          (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n        }\n      },\n      complete: function () {\n        var _a, _b;\n\n        if (!subscriptionStopped) {\n          if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n            ref.current.options.onComplete();\n          } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      }\n    });\n    return function () {\n      // immediately stop receiving subscription values, but do not unsubscribe\n      // until after a short delay in case another useSubscription hook is\n      // reusing the same underlying observable and is about to subscribe\n      subscriptionStopped = true;\n      setTimeout(function () {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"react\";\nimport type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport { equal } from \"@wry/equality\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport type {\n  NoInfer,\n  SubscriptionHookOptions,\n  SubscriptionResult,\n} from \"../types/types.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\nexport function useSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const hasIssuedDeprecationWarningRef = React.useRef(false);\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = React.useState<\n    SubscriptionResult<TData, TVariables>\n  >({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options?.onSubscriptionData) {\n      invariant.warn(\n        options.onData ?\n          \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n        : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options?.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete ?\n          \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n        : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const [observable, setObservable] = React.useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const canResetObservableRef = React.useRef(false);\n  React.useEffect(() => {\n    return () => {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n\n  const ref = React.useRef({ client, subscription, options });\n  React.useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === \"function\") {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (\n        !options?.skip !== !ref.current.options?.skip ||\n        canResetObservableRef.current\n      ) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (\n      (shouldResubscribe !== false &&\n        (client !== ref.current.client ||\n          subscription !== ref.current.subscription ||\n          options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n          !options?.skip !== !ref.current.options?.skip ||\n          !equal(options?.variables, ref.current.options?.variables))) ||\n      canResetObservableRef.current\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(\n        client.subscribe({\n          query: subscription,\n          variables: options?.variables,\n          fetchPolicy: options?.fetchPolicy,\n          context: options?.context,\n        })\n      );\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options, canResetObservableRef.current]);\n\n  React.useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    let subscriptionStopped = false;\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        if (subscriptionStopped) {\n          return;\n        }\n\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        if (ref.current.options?.onData) {\n          ref.current.options.onData({\n            client,\n            data: result,\n          });\n        } else if (ref.current.options?.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client,\n            subscriptionData: result,\n          });\n        }\n      },\n      error(error) {\n        if (!subscriptionStopped) {\n          setResult({\n            loading: false,\n            data: void 0,\n            error,\n            variables: options?.variables,\n          });\n          ref.current.options?.onError?.(error);\n        }\n      },\n      complete() {\n        if (!subscriptionStopped) {\n          if (ref.current.options?.onComplete) {\n            ref.current.options.onComplete();\n          } else if (ref.current.options?.onSubscriptionComplete) {\n            ref.current.options.onSubscriptionComplete();\n          }\n        }\n      },\n    });\n\n    return () => {\n      // immediately stop receiving subscription values, but do not unsubscribe\n      // until after a short delay in case another useSubscription hook is\n      // reusing the same underlying observable and is about to subscribe\n      subscriptionStopped = true;\n      setTimeout(() => {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]);\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}