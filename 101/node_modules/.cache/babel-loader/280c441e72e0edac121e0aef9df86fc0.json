{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport * as React from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useDeepMemo, useLazyRef } from \"./internal/index.js\";\nexport function useFragment(options) {\n  var cache = useApolloClient().cache;\n  var diffOptions = useDeepMemo(function () {\n    var fragment = options.fragment,\n        fragmentName = options.fragmentName,\n        from = options.from,\n        _a = options.optimistic,\n        optimistic = _a === void 0 ? true : _a,\n        rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n\n    return __assign(__assign({}, rest), {\n      returnPartialData: true,\n      id: typeof from === \"string\" ? from : cache.identify(from),\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic: optimistic\n    });\n  }, [options]);\n  var resultRef = useLazyRef(function () {\n    return diffToResult(cache.diff(diffOptions));\n  }); // Used for both getSnapshot and getServerSnapshot\n\n  var getSnapshot = React.useCallback(function () {\n    return resultRef.current;\n  }, []);\n  return useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    var lastTimeout = 0;\n    var unsubscribe = cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function (diff) {\n        if (!equal(diff.result, resultRef.current.data)) {\n          resultRef.current = diffToResult(diff); // If we get another update before we've re-rendered, bail out of\n          // the update and try again. This ensures that the relative timing\n          // between useQuery and useFragment stays roughly the same as\n          // fixed in https://github.com/apollographql/apollo-client/pull/11083\n\n          clearTimeout(lastTimeout);\n          lastTimeout = setTimeout(forceUpdate);\n        }\n      }\n    }));\n    return function () {\n      unsubscribe();\n      clearTimeout(lastTimeout);\n    };\n  }, [cache, diffOptions]), getSnapshot, getSnapshot);\n}\n\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../src/react/hooks/useFragment.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { equal } from \"@wry/equality\";\n\nimport type { DeepPartial } from \"../../utilities/index.js\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport type {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache/index.js\";\n\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport type { OperationVariables } from \"../../core/index.js\";\nimport type { NoInfer } from \"../types/types.js\";\nimport { useDeepMemo, useLazyRef } from \"./internal/index.js\";\n\nexport interface UseFragmentOptions<TData, TVars>\n  extends Omit<\n      Cache.DiffOptions<NoInfer<TData>, NoInfer<TVars>>,\n      \"id\" | \"query\" | \"optimistic\" | \"previousResult\" | \"returnPartialData\"\n    >,\n    Omit<\n      Cache.ReadFragmentOptions<TData, TVars>,\n      \"id\" | \"variables\" | \"returnPartialData\"\n    > {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n}\n\nexport type UseFragmentResult<TData> =\n  | {\n      data: TData;\n      complete: true;\n      missing?: never;\n    }\n  | {\n      data: DeepPartial<TData>;\n      complete: false;\n      missing?: MissingTree;\n    };\n\nexport function useFragment<TData = any, TVars = OperationVariables>(\n  options: UseFragmentOptions<TData, TVars>\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient();\n\n  const diffOptions = useDeepMemo<Cache.DiffOptions<TData, TVars>>(() => {\n    const {\n      fragment,\n      fragmentName,\n      from,\n      optimistic = true,\n      ...rest\n    } = options;\n\n    return {\n      ...rest,\n      returnPartialData: true,\n      id: typeof from === \"string\" ? from : cache.identify(from),\n      query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n      optimistic,\n    };\n  }, [options]);\n\n  const resultRef = useLazyRef<UseFragmentResult<TData>>(() =>\n    diffToResult(cache.diff<TData>(diffOptions))\n  );\n\n  // Used for both getSnapshot and getServerSnapshot\n  const getSnapshot = React.useCallback(() => resultRef.current, []);\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (forceUpdate) => {\n        let lastTimeout = 0;\n        const unsubscribe = cache.watch({\n          ...diffOptions,\n          immediate: true,\n          callback(diff) {\n            if (!equal(diff.result, resultRef.current.data)) {\n              resultRef.current = diffToResult(diff);\n              // If we get another update before we've re-rendered, bail out of\n              // the update and try again. This ensures that the relative timing\n              // between useQuery and useFragment stays roughly the same as\n              // fixed in https://github.com/apollographql/apollo-client/pull/11083\n              clearTimeout(lastTimeout);\n              lastTimeout = setTimeout(forceUpdate) as any;\n            }\n          },\n        });\n        return () => {\n          unsubscribe();\n          clearTimeout(lastTimeout);\n        };\n      },\n      [cache, diffOptions]\n    ),\n    getSnapshot,\n    getSnapshot\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>\n): UseFragmentResult<TData> {\n  const result = {\n    data: diff.result!,\n    complete: !!diff.complete,\n  } as UseFragmentResult<TData>;\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map((error) => error.missing));\n  }\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}