{"ast":null,"code":"export function iterateObserversSafely(observers, method, argument) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  var observersWithMethod = [];\n  observers.forEach(function (obs) {\n    return obs[method] && observersWithMethod.push(obs);\n  });\n  observersWithMethod.forEach(function (obs) {\n    return obs[method](argument);\n  });\n}","map":{"version":3,"sources":["../../../src/utilities/observables/iteration.ts"],"names":[],"mappings":"AAEA,OAAM,SAAU,sBAAV,CACJ,SADI,EAEJ,MAFI,EAGJ,QAHI,EAGQ;AAEZ;AACA;AACA;AACA,MAAM,mBAAmB,GAAkB,EAA3C;AACA,EAAA,SAAS,CAAC,OAAV,CAAkB,UAAC,GAAD,EAAI;AAAK,WAAA,GAAG,CAAC,MAAD,CAAH,IAAe,mBAAmB,CAAC,IAApB,CAAf,GAAe,CAAf;AAA4C,GAAvE;AACA,EAAA,mBAAmB,CAAC,OAApB,CAA4B,UAAC,GAAD,EAAI;AAAK,WAAC,GAAW,CAAC,MAAD,CAAX,CAAD,QAAC,CAAD;AAA8B,GAAnE;AACD","sourcesContent":["import type { Observer } from \"./Observable.js\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach((obs) => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach((obs) => (obs as any)[method](argument));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}