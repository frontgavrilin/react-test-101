{"ast":null,"code":"import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\n\nfunction wrap(fn) {\n  return function (message) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    if (typeof message === \"number\") {\n      var arg0 = message;\n      message = getHandledErrorMsg(arg0);\n\n      if (!message) {\n        message = getFallbackErrorMsg(arg0, args);\n        args = [];\n      }\n    }\n\n    fn.apply(void 0, [message].concat(args));\n  };\n}\n\nvar invariant = Object.assign(function invariant(condition, message) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  if (!condition) {\n    originalInvariant(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));\n  }\n}, {\n  debug: wrap(originalInvariant.debug),\n  log: wrap(originalInvariant.log),\n  warn: wrap(originalInvariant.warn),\n  error: wrap(originalInvariant.error)\n});\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\n\nfunction newInvariantError(message) {\n  var optionalParams = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    optionalParams[_i - 1] = arguments[_i];\n  }\n\n  return new InvariantError(getHandledErrorMsg(message, optionalParams) || getFallbackErrorMsg(message, optionalParams));\n}\n\nvar ApolloErrorMessageHandler = Symbol.for(\"ApolloErrorMessageHandler_\" + version);\n\nfunction stringify(arg) {\n  return typeof arg == \"string\" ? arg : stringifyForDisplay(arg, 2).slice(0, 1000);\n}\n\nfunction getHandledErrorMsg(message, messageArgs) {\n  if (messageArgs === void 0) {\n    messageArgs = [];\n  }\n\n  if (!message) return;\n  return global[ApolloErrorMessageHandler] && global[ApolloErrorMessageHandler](message, messageArgs.map(stringify));\n}\n\nfunction getFallbackErrorMsg(message, messageArgs) {\n  if (messageArgs === void 0) {\n    messageArgs = [];\n  }\n\n  if (!message) return;\n  return \"An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#\".concat(encodeURIComponent(JSON.stringify({\n    version: version,\n    message: message,\n    args: messageArgs.map(stringify)\n  })));\n}\n\nexport { invariant, InvariantError, newInvariantError, ApolloErrorMessageHandler };","map":{"version":3,"sources":["../../../src/utilities/globals/invariantWrappers.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,IAAI,iBAAtB,EAAyC,cAAzC,QAA+D,cAA/D;AACA,SAAS,OAAT,QAAwB,kBAAxB;AACA,OAAO,MAAP,MAAmB,aAAnB;AAEA,SAAS,mBAAT,QAAoC,kCAApC;;AAEA,SAAS,IAAT,CAAc,EAAd,EAAwD;AACtD,SAAO,UAAU,OAAV,EAAmC;AAAE,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,MAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC1C,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAM,IAAI,GAAG,OAAb;AACA,MAAA,OAAO,GAAG,kBAAkB,CAAC,IAAD,CAA5B;;AACA,UAAI,CAAC,OAAL,EAAc;AACZ,QAAA,OAAO,GAAG,mBAAmB,CAAC,IAAD,EAAO,IAAP,CAA7B;AACA,QAAA,IAAI,GAAG,EAAP;AACD;AACF;;AACD,IAAA,EAAE,CAAA,KAAF,CAAE,KAAA,CAAF,EAAM,CAAC,OAAD,EAAU,MAAV,CAAiB,IAAjB,CAAN;AACD,GAVD;AAWD;;AAgDD,IAAM,SAAS,GAAqB,MAAM,CAAC,MAAP,CAClC,SAAS,SAAT,CACE,SADF,EAEE,OAFF,EAE2B;AACzB,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAkB;AAAlB,IAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAEA,MAAI,CAAC,SAAL,EAAgB;AACd,IAAA,iBAAiB,CACf,SADe,EAEf,kBAAkB,CAAC,OAAD,EAAU,IAAV,CAAlB,IAAqC,mBAAmB,CAAC,OAAD,EAAU,IAAV,CAFzC,CAAjB;AAID;AACF,CAZiC,EAalC;AACE,EAAA,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAnB,CADb;AAEE,EAAA,GAAG,EAAE,IAAI,CAAC,iBAAiB,CAAC,GAAnB,CAFX;AAGE,EAAA,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAnB,CAHZ;AAIE,EAAA,KAAK,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAnB;AAJb,CAbkC,CAApC;AAqBA;;;;;;;;;AASG;;AACH,SAAS,iBAAT,CACE,OADF,EAC2B;AACzB,MAAA,cAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA4B;AAA5B,IAAA,cAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAEA,SAAO,IAAI,cAAJ,CACL,kBAAkB,CAAC,OAAD,EAAU,cAAV,CAAlB,IACE,mBAAmB,CAAC,OAAD,EAAU,cAAV,CAFhB,CAAP;AAID;;AAED,IAAM,yBAAyB,GAAG,MAAM,CAAC,GAAP,CAChC,+BAA+B,OADC,CAAlC;;AAWA,SAAS,SAAT,CAAmB,GAAnB,EAA2B;AACzB,SAAO,OAAO,GAAP,IAAc,QAAd,GAAyB,GAAzB,GACH,mBAAmB,CAAC,GAAD,EAAM,CAAN,CAAnB,CAA4B,KAA5B,CAAkC,CAAlC,EAAqC,IAArC,CADJ;AAGD;;AAED,SAAS,kBAAT,CACE,OADF,EAEE,WAFF,EAE6B;AAA3B,MAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,EAAA;AAA2B;;AAE3B,MAAI,CAAC,OAAL,EAAc;AACd,SACE,MAAM,CAAC,yBAAD,CAAN,IACA,MAAM,CAAC,yBAAD,CAAN,CAAkC,OAAlC,EAA2C,WAAW,CAAC,GAAZ,CAAgB,SAAhB,CAA3C,CAFF;AAID;;AAED,SAAS,mBAAT,CACE,OADF,EAEE,WAFF,EAE6B;AAA3B,MAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,EAAA;AAA2B;;AAE3B,MAAI,CAAC,OAAL,EAAc;AACd,SAAO,+FAAA,MAAA,CAA+F,kBAAkB,CACtH,IAAI,CAAC,SAAL,CAAe;AACb,IAAA,OAAO,EAAA,OADM;AAEb,IAAA,OAAO,EAAA,OAFM;AAGb,IAAA,IAAI,EAAE,WAAW,CAAC,GAAZ,CAAgB,SAAhB;AAHO,GAAf,CADsH,CAAjH,CAAP;AAOD;;AAED,SACE,SADF,EAEE,cAFF,EAGE,iBAHF,EAIE,yBAJF","sourcesContent":["import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport type { ErrorCodes } from \"../../invariantErrorCodes.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\n\nfunction wrap(fn: (msg?: string, ...args: any[]) => void) {\n  return function (message?: string | number, ...args: any[]) {\n    if (typeof message === \"number\") {\n      const arg0 = message;\n      message = getHandledErrorMsg(arg0);\n      if (!message) {\n        message = getFallbackErrorMsg(arg0, args);\n        args = [];\n      }\n    }\n    fn(...[message].concat(args));\n  };\n}\n\ntype LogFunction = {\n  /**\n   * Logs a `$level` message if the user used `ts-invariant`'s `setVerbosity` to set\n   * a verbosity level of `$level` or lower. (defaults to `\"log\"`).\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadDevMessages` to add the message strings to the bundle.\n   * The documentation will display the message without argument substitution.\n   * Instead, the arguments will be printed on the console after the link.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * String substitutions like %s, %o, %d or %f are supported.\n   */\n  (message?: any, ...optionalParams: unknown[]): void;\n};\n\ntype WrappedInvariant = {\n  /**\n   * Throws and InvariantError with the given message if the condition is false.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadErrorMessages` to add the message strings to the bundle.\n   * The documentation will display the message with the arguments substituted.\n   *\n   * String substitutions with %s are supported and will also return\n   * pretty-stringified objects.\n   * Excess `optionalParams` will be swallowed.\n   */\n  (\n    condition: any,\n    message?: string | number,\n    ...optionalParams: unknown[]\n  ): asserts condition;\n\n  debug: LogFunction;\n  log: LogFunction;\n  warn: LogFunction;\n  error: LogFunction;\n};\nconst invariant: WrappedInvariant = Object.assign(\n  function invariant(\n    condition: any,\n    message?: string | number,\n    ...args: unknown[]\n  ): asserts condition {\n    if (!condition) {\n      originalInvariant(\n        condition,\n        getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args)\n      );\n    }\n  },\n  {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n  }\n);\n\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(\n  message?: string | number,\n  ...optionalParams: unknown[]\n) {\n  return new InvariantError(\n    getHandledErrorMsg(message, optionalParams) ||\n      getFallbackErrorMsg(message, optionalParams)\n  );\n}\n\nconst ApolloErrorMessageHandler = Symbol.for(\n  \"ApolloErrorMessageHandler_\" + version\n);\ndeclare global {\n  interface Window {\n    [ApolloErrorMessageHandler]?: {\n      (message: string | number, args: unknown[]): string | undefined;\n    } & ErrorCodes;\n  }\n}\n\nfunction stringify(arg: any) {\n  return typeof arg == \"string\" ? arg : (\n      stringifyForDisplay(arg, 2).slice(0, 1000)\n    );\n}\n\nfunction getHandledErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  return (\n    global[ApolloErrorMessageHandler] &&\n    global[ApolloErrorMessageHandler](message, messageArgs.map(stringify))\n  );\n}\n\nfunction getFallbackErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  return `An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#${encodeURIComponent(\n    JSON.stringify({\n      version,\n      message,\n      args: messageArgs.map(stringify),\n    })\n  )}`;\n}\n\nexport {\n  invariant,\n  InvariantError,\n  newInvariantError,\n  ApolloErrorMessageHandler,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}