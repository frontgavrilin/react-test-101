{"ast":null,"code":"import * as React from \"react\";\nimport { canUseSymbol } from \"../../utilities/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\"; // To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\n\nvar contextKey = canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nexport function getApolloContext() {\n  invariant(\"createContext\" in React, 45);\n  var context = React.createContext[contextKey];\n\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext({}),\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n    context.displayName = \"ApolloContext\";\n  }\n\n  return context;\n}\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\n\nexport var resetApolloContext = getApolloContext;","map":{"version":3,"sources":["../../../src/react/context/ApolloContext.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AAEA,SAAS,YAAT,QAA6B,0BAA7B;AAEA,SAAS,SAAT,QAA0B,kCAA1B,C,CAOA;AACA;AACA;AACA;;AACA,IAAM,UAAU,GACd,YAAY,GAAG,MAAM,CAAC,GAAP,CAAW,oBAAX,CAAH,GAAsC,oBADpD;AAGA,OAAM,SAAU,gBAAV,GAA0B;AAC9B,EAAA,SAAS,CACP,mBAAmB,KADZ,EAEP,EAFO,CAAT;MAGI,OAAA,GAAA,KAAA,CAAA,aAAA,CAAA,UAAA,C;;MACA,CAAA,O,EAAA;AACA,IAAA,MAAA,CAAA,cAAA,CAAA,KAAA,CAAA,aAAA,EAAA,UAAA,EAAA;AACA,MAAA,KAAA,EAAA,OAAA,GAAA,KAAA,CAAA,aAAA,CAAA,EAAA,CADA;AAIA,MAAA,UAAW,EAAM,KAJjB;AAOC,MAAA,QAAU,EAAA,KAPX;AAQF,MAAA,YAAO,EAAA;AARL,KAAA;AAUA,IAAA,OAAA,CAAA,WAAA,GAAiB,eAAjB;AACA;;SACA,O;AACD;AACD;AACF;AACA;AACF;AAEA","sourcesContent":["import * as React from \"react\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { canUseSymbol } from \"../../utilities/index.js\";\nimport type { RenderPromises } from \"../ssr/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey =\n  canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\n\nexport function getApolloContext(): React.Context<ApolloContextValue> {\n  invariant(\n    \"createContext\" in React,\n    \"Invoking `getApolloContext` in an environment where `React.createContext` is not available.\\n\" +\n      \"The Apollo Client functionality you are trying to use is only available in React Client Components.\\n\" +\n      'Please make sure to add \"use client\" at the top of your file.\\n' +\n      // TODO: change to React documentation once React documentation contains information about Client Components\n      \"For more information, see https://nextjs.org/docs/getting-started/react-essentials#client-components\"\n  );\n\n  let context = (React.createContext as any)[\n    contextKey\n  ] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: (context = React.createContext<ApolloContextValue>({})),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = \"ApolloContext\";\n  }\n  return context;\n}\n\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\nexport const resetApolloContext = getApolloContext;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}