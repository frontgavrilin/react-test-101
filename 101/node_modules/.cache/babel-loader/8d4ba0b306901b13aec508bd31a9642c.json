{"ast":null,"code":"/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../utilities/index.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\n\nfunction isNodeResponse(value) {\n  return !!value.body;\n}\n\nfunction isReadableStream(value) {\n  return !!value.getReader;\n}\n\nfunction isAsyncIterableIterator(value) {\n  return !!(canUseAsyncIteratorSymbol && value[Symbol.asyncIterator]);\n}\n\nfunction isStreamableBlob(value) {\n  return !!value.stream;\n}\n\nfunction isBlob(value) {\n  return !!value.arrayBuffer;\n}\n\nfunction isNodeReadableStream(value) {\n  return !!value.pipe;\n}\n\nexport function responseIterator(response) {\n  var body = response;\n  if (isNodeResponse(response)) body = response.body;\n  if (isAsyncIterableIterator(body)) return asyncIterator(body);\n  if (isReadableStream(body)) return readerIterator(body.getReader()); // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n\n  if (isStreamableBlob(body)) {\n    return readerIterator(body.stream().getReader());\n  }\n\n  if (isBlob(body)) return promiseIterator(body.arrayBuffer());\n  if (isNodeReadableStream(body)) return nodeStreamIterator(body);\n  throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}","map":{"version":3,"sources":["../../../src/link/http/responseIterator.ts"],"names":[],"mappings":"AAAA;;;AAGG;AAIH,SAAS,yBAAT,QAA0C,0BAA1C;AAEA,OAAO,aAAP,MAA0B,sBAA1B;AACA,OAAO,kBAAP,MAA+B,2BAA/B;AACA,OAAO,eAAP,MAA4B,wBAA5B;AACA,OAAO,cAAP,MAA2B,uBAA3B;;AAEA,SAAS,cAAT,CAAwB,KAAxB,EAAkC;AAChC,SAAO,CAAC,CAAE,KAAsB,CAAC,IAAjC;AACD;;AAED,SAAS,gBAAT,CAA0B,KAA1B,EAAoC;AAClC,SAAO,CAAC,CAAE,KAA6B,CAAC,SAAxC;AACD;;AAED,SAAS,uBAAT,CACE,KADF,EACY;AAEV,SAAO,CAAC,EACN,yBAAyB,IACxB,KAAoC,CAAC,MAAM,CAAC,aAAR,CAF/B,CAAR;AAID;;AAED,SAAS,gBAAT,CAA0B,KAA1B,EAAoC;AAClC,SAAO,CAAC,CAAE,KAAc,CAAC,MAAzB;AACD;;AAED,SAAS,MAAT,CAAgB,KAAhB,EAA0B;AACxB,SAAO,CAAC,CAAE,KAAc,CAAC,WAAzB;AACD;;AAED,SAAS,oBAAT,CAA8B,KAA9B,EAAwC;AACtC,SAAO,CAAC,CAAE,KAA4B,CAAC,IAAvC;AACD;;AAED,OAAM,SAAU,gBAAV,CACJ,QADI,EAC6B;AAEjC,MAAI,IAAI,GAAY,QAApB;AAEA,MAAI,cAAc,CAAC,QAAD,CAAlB,EAA8B,IAAI,GAAG,QAAQ,CAAC,IAAhB;AAE9B,MAAI,uBAAuB,CAAC,IAAD,CAA3B,EAAmC,OAAO,aAAa,CAAI,IAAJ,CAApB;AAEnC,MAAI,gBAAgB,CAAC,IAAD,CAApB,EAA4B,OAAO,cAAc,CAAI,IAAI,CAAC,SAAL,EAAJ,CAArB,CARK,CAUjC;AACA;;AACA,MAAI,gBAAgB,CAAC,IAAD,CAApB,EAA4B;AAC1B,WAAO,cAAc,CAClB,IAAI,CAAC,MAAL,GAA+C,SAA/C,EADkB,CAArB;AAGD;;AAED,MAAI,MAAM,CAAC,IAAD,CAAV,EAAkB,OAAO,eAAe,CAAI,IAAI,CAAC,WAAL,EAAJ,CAAtB;AAElB,MAAI,oBAAoB,CAAC,IAAD,CAAxB,EAAgC,OAAO,kBAAkB,CAAI,IAAJ,CAAzB;AAEhC,QAAM,IAAI,KAAJ,CACJ,4EADI,CAAN;AAGD","sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\n\nimport type { Response as NodeResponse } from \"node-fetch\";\nimport type { Readable as NodeReadableStream } from \"stream\";\nimport { canUseAsyncIteratorSymbol } from \"../../utilities/index.js\";\n\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\n\nfunction isNodeResponse(value: any): value is NodeResponse {\n  return !!(value as NodeResponse).body;\n}\n\nfunction isReadableStream(value: any): value is ReadableStream<any> {\n  return !!(value as ReadableStream<any>).getReader;\n}\n\nfunction isAsyncIterableIterator(\n  value: any\n): value is AsyncIterableIterator<any> {\n  return !!(\n    canUseAsyncIteratorSymbol &&\n    (value as AsyncIterableIterator<any>)[Symbol.asyncIterator]\n  );\n}\n\nfunction isStreamableBlob(value: any): value is Blob {\n  return !!(value as Blob).stream;\n}\n\nfunction isBlob(value: any): value is Blob {\n  return !!(value as Blob).arrayBuffer;\n}\n\nfunction isNodeReadableStream(value: any): value is NodeReadableStream {\n  return !!(value as NodeReadableStream).pipe;\n}\n\nexport function responseIterator<T>(\n  response: Response | NodeResponse\n): AsyncIterableIterator<T> {\n  let body: unknown = response;\n\n  if (isNodeResponse(response)) body = response.body;\n\n  if (isAsyncIterableIterator(body)) return asyncIterator<T>(body);\n\n  if (isReadableStream(body)) return readerIterator<T>(body.getReader());\n\n  // this errors without casting to ReadableStream<T>\n  // because Blob.stream() returns a NodeJS ReadableStream\n  if (isStreamableBlob(body)) {\n    return readerIterator<T>(\n      (body.stream() as unknown as ReadableStream<T>).getReader()\n    );\n  }\n\n  if (isBlob(body)) return promiseIterator<T>(body.arrayBuffer());\n\n  if (isNodeReadableStream(body)) return nodeStreamIterator<T>(body);\n\n  throw new Error(\n    \"Unknown body type for responseIterator. Please pass a streamable response.\"\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}