{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\n\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n\n  return name;\n} // This parser is mostly used to safety check incoming documents.\n\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  invariant(!!document && !!document.kind, 59, document);\n  var fragments = [];\n  var queries = [];\n  var mutations = [];\n  var subscriptions = [];\n\n  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n    var x = _a[_i];\n\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n\n        case \"mutation\":\n          mutations.push(x);\n          break;\n\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 60);\n  invariant(queries.length + mutations.length + subscriptions.length <= 1, 61, document, queries.length, subscriptions.length, mutations.length);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  invariant(definitions.length === 1, 62, document, definitions.length);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  invariant(operation.type === type, 63, requiredOperationName, requiredOperationName, usedOperationName);\n}","map":{"version":3,"sources":["../../../src/react/parser/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions =\n    queries.length ? queries\n    : mutations.length ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}