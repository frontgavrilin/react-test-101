{"ast":null,"code":"import { isPlainObject } from \"./objects.js\";\nexport function omitDeep(value, key) {\n  return __omitDeep(value, key);\n}\n\nfunction __omitDeep(value, key, known) {\n  if (known === void 0) {\n    known = new Map();\n  }\n\n  if (known.has(value)) {\n    return known.get(value);\n  }\n\n  var modified = false;\n\n  if (Array.isArray(value)) {\n    var array_1 = [];\n    known.set(value, array_1);\n    value.forEach(function (value, index) {\n      var result = __omitDeep(value, key, known);\n\n      modified || (modified = result !== value);\n      array_1[index] = result;\n    });\n\n    if (modified) {\n      return array_1;\n    }\n  } else if (isPlainObject(value)) {\n    var obj_1 = Object.create(Object.getPrototypeOf(value));\n    known.set(value, obj_1);\n    Object.keys(value).forEach(function (k) {\n      if (k === key) {\n        modified = true;\n        return;\n      }\n\n      var result = __omitDeep(value[k], key, known);\n\n      modified || (modified = result !== value[k]);\n      obj_1[k] = result;\n    });\n\n    if (modified) {\n      return obj_1;\n    }\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../../../src/utilities/common/omitDeep.ts"],"names":[],"mappings":"AACA,SAAS,aAAT,QAA8B,cAA9B;AAEA,OAAM,SAAU,QAAV,CAAwC,KAAxC,EAAkD,GAAlD,EAAwD;AAC5D,SAAO,UAAU,CAAC,KAAD,EAAQ,GAAR,CAAjB;AACD;;AAED,SAAS,UAAT,CACE,KADF,EAEE,GAFF,EAGE,KAHF,EAG6B;AAA3B,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,IAAY,GAAZ,EAAA;AAA2B;;AAE3B,MAAI,KAAK,CAAC,GAAN,CAAU,KAAV,CAAJ,EAAsB;AACpB,WAAO,KAAK,CAAC,GAAN,CAAU,KAAV,CAAP;AACD;;AAED,MAAI,QAAQ,GAAG,KAAf;;AAEA,MAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACxB,QAAM,OAAK,GAAU,EAArB;AACA,IAAA,KAAK,CAAC,GAAN,CAAU,KAAV,EAAiB,OAAjB;AAEA,IAAA,KAAK,CAAC,OAAN,CAAc,UAAC,KAAD,EAAQ,KAAR,EAAa;AACzB,UAAM,MAAM,GAAG,UAAU,CAAC,KAAD,EAAQ,GAAR,EAAa,KAAb,CAAzB;;AACA,MAAA,QAAQ,KAAR,QAAQ,GAAK,MAAM,KAAK,KAAhB,CAAR;AAEA,MAAA,OAAK,CAAC,KAAD,CAAL,GAAe,MAAf;AACD,KALD;;AAOA,QAAI,QAAJ,EAAc;AACZ,aAAO,OAAP;AACD;AACF,GAdD,MAcO,IAAI,aAAa,CAAC,KAAD,CAAjB,EAA0B;AAC/B,QAAM,KAAG,GAAG,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,cAAP,CAAsB,KAAtB,CAAd,CAAZ;AACA,IAAA,KAAK,CAAC,GAAN,CAAU,KAAV,EAAiB,KAAjB;AAEA,IAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,UAAC,CAAD,EAAE;AAC3B,UAAI,CAAC,KAAK,GAAV,EAAe;AACb,QAAA,QAAQ,GAAG,IAAX;AACA;AACD;;AAED,UAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,GAAX,EAAgB,KAAhB,CAAzB;;AACA,MAAA,QAAQ,KAAR,QAAQ,GAAK,MAAM,KAAK,KAAK,CAAC,CAAD,CAArB,CAAR;AAEA,MAAA,KAAG,CAAC,CAAD,CAAH,GAAS,MAAT;AACD,KAVD;;AAYA,QAAI,QAAJ,EAAc;AACZ,aAAO,KAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD","sourcesContent":["import type { DeepOmit } from \"../types/DeepOmit.js\";\nimport { isPlainObject } from \"./objects.js\";\n\nexport function omitDeep<T, K extends string>(value: T, key: K) {\n  return __omitDeep(value, key);\n}\n\nfunction __omitDeep<T, K extends string>(\n  value: T,\n  key: K,\n  known = new Map<any, any>()\n): DeepOmit<T, K> {\n  if (known.has(value)) {\n    return known.get(value);\n  }\n\n  let modified = false;\n\n  if (Array.isArray(value)) {\n    const array: any[] = [];\n    known.set(value, array);\n\n    value.forEach((value, index) => {\n      const result = __omitDeep(value, key, known);\n      modified ||= result !== value;\n\n      array[index] = result;\n    });\n\n    if (modified) {\n      return array as DeepOmit<T, K>;\n    }\n  } else if (isPlainObject(value)) {\n    const obj = Object.create(Object.getPrototypeOf(value));\n    known.set(value, obj);\n\n    Object.keys(value).forEach((k) => {\n      if (k === key) {\n        modified = true;\n        return;\n      }\n\n      const result = __omitDeep(value[k], key, known);\n      modified ||= result !== value[k];\n\n      obj[k] = result;\n    });\n\n    if (modified) {\n      return obj;\n    }\n  }\n\n  return value as DeepOmit<T, K>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}